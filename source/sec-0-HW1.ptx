<section xml:id="sec-HW1-1">
    <title>HW1</title>

    <exercises>
    <exercise xml:id="exer-CodeRunner-Overview-1" label="exe-sec-HW1-1-271600">
        <statement correct="yes">
            <p>
                Welcome to ActiveCode coding problems in Runestone! Here's an image of a typical coding problem:
            </p>

            <p>
                <image source="images/hw1_sample_question_description.png" title="A sample coding problem" width="80%"></image>
            </p>

            <p>
                <ol>
                    <li>
                        <p>
                            The first thing you should do when starting a problem is to carefully read the problem description.
                            The problem description tells you what your solution code needs to accomplish, as well as important details about the problem including:
                                            <ul>
                    <li>
                        <p>
                            Type of input your code must handle
                        </p>
                    </li>

                    <li>
                        <p>
                            Type of output your code will need to produce
                        </p>
                    </li>

                    <li>
                        <p>
                            Whether your code should produce output (print) or a value (return)
                        </p>
                    </li>

                    <li>
                        <p>
                            If you don't understand the problem, you won't be able to solve the problem; this is the most important step!
                        </p>
                    </li>
                </ul>

                        </p>
                    </li>
                    <li>
                        <p>
                            To help you understand the problem, you will always be given a few examples.
                            Typically, the examples show sample inputs and the result that your code should produce for each input.
                            It's important to understand that your solution needs to be general.
                            This means that your goal is to code a solution that will work for any valid input for the problem, not just the given examples.
                        </p>
                    </li>

                    <li>
                        <p>
                            Once you understand the problem, you can start coding your solution in the white box.
                            Depending on the problem, there may be some code already there to get you started.
                            When you are ready to check your solution, click the <q>Save &#x26; Run</q> button.
                        </p>

                        <p>
                            If I were to click the <q>Save &#x26; Run</q> button for the example problem in the image above, here is the feedback that I would get from Runestone:
                        </p>

                        <p>
                            <image source="images/check_button_result.png" width="80%"></image>
                        </p>

                        <p>
                            For each example input, Runestone shows you the correct (Expected Value) result, the result produced by your code (Actual Value), and whether your result is correct (Result).
                            If the expected value or actual value is too long to be fully shown in the results table, clicking on the <q>Expand Differences</q> button will show that information in a popup window.
                        </p>
                    </li>

                    <li>
                        <p>
                            Use the Runestone feedback to try to understand where the problems are in your code, then work on fixing your code.
                            Keep checking and revising until you reach the correct solution.
                        </p>
                    </li>
                </ol>
            </p>

            <p>
                Now it is time for you to try solving some ActiveCode problems in Runestone! <alert>Select the answer "True" and click the "Check Me" button before moving on.</alert>
            </p>
        </statement>
    </exercise>
    <exercise xml:id="exer-output_input-1" label="exe-sec-HW1-1-269746">
      <title>Output the Input</title>
      <statement>
        <p>Complete the program below by adding a line of code that will output a message reporting back what is input by the user.</p>
        <p>Note: The first line of the program for getting input from the user is provided. <em>Do not change this line.</em></p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>Howdy!</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>user input: Howdy!</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>Muddled marmots!</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>user input: Muddled marmots!</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>3.14</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>user input: 3.14</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>
the_input = input()
# call the print function with two arguments
        </code>
        <tests>
          <iotest>
            <input>Howdy!</input>
            <output>user input: Howdy!</output>
          </iotest>
          <iotest>
            <input>Muddled marmots!</input>
            <output>user input: Muddled marmots!</output>
          </iotest>
          <iotest>
            <input>3.14</input>
            <output>user input: 3.14</output>
          </iotest>
          <iotest>
            <input>42 is the answer to everything</input>
            <output>user input: 42 is the answer to everything</output>
          </iotest>
          <iotest>
            <input>That's all, folks!</input>
            <output>user input: That's all, folks!</output>
          </iotest>
          <iotest>
            <input>99 bottles of beer on the wall</input>
            <output>user input: 99 bottles of beer on the wall</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-say_greeting-1" label="exe-sec-HW1-1-269747">
      <title>Say Hello</title>
      <statement>
        <p>Write a short program to get a name from the user, then output a message saying "hello" to the user by name.</p>
        <p>Note: In ALL of your CodeRunner solutions, use the input function with no arguments. For example, in this problem, your first line of code might be: <c>name = input()</c></p>
        <p>As an experiment, see what happens when you use: <c>name = input("Tell me your name: ")</c>and then CHECK your answer.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>everyone</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>Hello everyone</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>coder-in-training</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>Hello coder-in-training</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>Ziggy</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>Hello Ziggy</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>
# Hint: similar to previous question; need two lines of code.
# First, get the input.
# Second, print the message.
        </code>
        <tests>
          <iotest>
            <input>everyone</input>
            <output>Hello everyone</output>
          </iotest>
          <iotest>
            <input>coder-in-training</input>
            <output>Hello coder-in-training</output>
          </iotest>
          <iotest>
            <input>Ziggy</input>
            <output>Hello Ziggy</output>
          </iotest>
          <iotest>
            <input>Diana</input>
            <output>Hello Diana</output>
          </iotest>
          <iotest>
            <input>Pythonista</input>
            <output>Hello Pythonista</output>
          </iotest>
          <iotest>
            <input>Mr. Gray</input>
            <output>Hello Mr. Gray</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-simple_addition-1" label="exe-sec-HW1-1-269748">
      <title>Add 8</title>
      <statement>
        <p>Write a program to get an integer value from standard input, <alert>add 8</alert>to the input value, then output the result.</p>
        <p>Note: The first line of the program, for getting input from the user, is provided.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>5</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>5 + 8 = 13</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>-7</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-7 + 8 = 1</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0 + 8 = 8</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>
num = int(input())

        </code>
        <tests>
          <iotest>
            <input>5</input>
            <output>5 + 8 = 13</output>
          </iotest>
          <iotest>
            <input>-7</input>
            <output>-7 + 8 = 1</output>
          </iotest>
          <iotest>
            <input>0</input>
            <output>0 + 8 = 8</output>
          </iotest>
          <iotest>
            <input>-1999</input>
            <output>-1999 + 8 = -1991</output>
          </iotest>
          <iotest>
            <input>-10</input>
            <output>-10 + 8 = -2</output>
          </iotest>
          <iotest>
            <input>-11</input>
            <output>-11 + 8 = -3</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-simple_multiplication-1" label="exe-sec-HW1-1-269749">
      <title>Multiply by 123</title>
      <statement>
        <p>Write a short program that will read a decimal value (a float) from standard input, multiply the input value <alert>by 123</alert>, then output a message with the result.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>5.5</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>5.5 * 123 = 676.5</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>-8.1</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-8.1 * 123 = -996.3</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>2.2</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>2.2 * 123 = 270.6</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>
# The following line reads the user input and converts
# it to a float value:
num = float(input())
        </code>
        <tests>
          <iotest>
            <input>5.5</input>
            <output>5.5 * 123 = 676.5</output>
          </iotest>
          <iotest>
            <input>-8.1</input>
            <output>-8.1 * 123 = -996.3</output>
          </iotest>
          <iotest>
            <input>2.2</input>
            <output>2.2 * 123 = 270.6</output>
          </iotest>
          <iotest>
            <input>0.0</input>
            <output>0.0 * 123 = 0.0</output>
          </iotest>
          <iotest>
            <input>-200.6</input>
            <output>-200.6 * 123 = -24673.8</output>
          </iotest>
          <iotest>
            <input>24.5</input>
            <output>24.5 * 123 = 3013.5</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-simple_modulo-1" label="exe-sec-HW1-1-269739">
      <title>Find the Remainder</title>
      <statement>
        <p>Write the code that will read an integer input and assign its value to the name <c>num</c>, calculate the remainder when <c>num</c>is divided by 3, and print an informative message. Hint: Use the remainder operator (%).</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>11</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>When we divide 11 by 3, the remainder is 2</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>3</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>When we divide 3 by 3, the remainder is 0</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>19</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>When we divide 19 by 3, the remainder is 1</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>11</input>
            <output>When we divide 11 by 3, the remainder is 2</output>
          </iotest>
          <iotest>
            <input>3</input>
            <output>When we divide 3 by 3, the remainder is 0</output>
          </iotest>
          <iotest>
            <input>19</input>
            <output>When we divide 19 by 3, the remainder is 1</output>
          </iotest>
          <iotest>
            <input>112</input>
            <output>When we divide 112 by 3, the remainder is 1</output>
          </iotest>
          <iotest>
            <input>225</input>
            <output>When we divide 225 by 3, the remainder is 0</output>
          </iotest>
          <iotest>
            <input>11111</input>
            <output>When we divide 11111 by 3, the remainder is 2</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-square_input-1" label="exe-sec-HW1-1-269750">
      <title>Square of Input</title>
      <statement>
        <p>Write the code to read an input, convert it to an integer value, assign that value to the name <c>x</c>, and print a message regarding the square of the input (i.e., <m>x^2</m>).</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>2</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>When x = 2 then x^2 = 4</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>24</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>When x = 24 then x^2 = 576</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>-18</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>When x = -18 then x^2 = 324</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>2</input>
            <output>When x = 2 then x^2 = 4</output>
          </iotest>
          <iotest>
            <input>24</input>
            <output>When x = 24 then x^2 = 576</output>
          </iotest>
          <iotest>
            <input>-18</input>
            <output>When x = -18 then x^2 = 324</output>
          </iotest>
          <iotest>
            <input>6</input>
            <output>When x = 6 then x^2 = 36</output>
          </iotest>
          <iotest>
            <input>15</input>
            <output>When x = 15 then x^2 = 225</output>
          </iotest>
          <iotest>
            <input>12345</input>
            <output>When x = 12345 then x^2 = 152399025</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-cylinder_volume-1" label="exe-sec-HW1-1-269751">
      <title>Volume of Cylinder</title>
      <statement>
        <p>Suppose we want to calculate the volume (in cubic cm) of a cylinder for which the radius of the base is R cm and the height is H cm. We will use the formula: volume = area of base * H. Rather than making a single large calculation and reporting the result, you should practice dividing the work into stages using two assignment statements.</p>
        <p>A partial solution is provided, you just need to add a bit more code.</p>
        <p>Notice that the statement <c>import math</c> makes all the objects in the math module available; your code should use <c>math.pi</c> (Python's name for π), in calculating the area of the base.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>3
5                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>141.372</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>6
2                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>226.195</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>2.3
3.5                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>58.167</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>
import math

# Read the radius from input; convert it to a float value and assign to R
R =
# Read the height from input; convert it to a float value and assign to H
H =
# Find the base area using math.pi and R
baseArea =
# Find the volume
volume =
# We round the volume to some precision
roundedVolume = round(volume, 3)
# Print the rounded volume
print( )
        </code>
        <tests>
          <iotest>
            <input>
              3
              5
            </input>
            <output>141.372</output>
          </iotest>
          <iotest>
            <input>
              6
              2
            </input>
            <output>226.195</output>
          </iotest>
          <iotest>
            <input>
              2.3
              3.5
            </input>
            <output>58.167</output>
          </iotest>
          <iotest>
            <input>
              0.7
              10.01
            </input>
            <output>15.409</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-convert_minutes-1" label="exe-sec-HW1-1-271601">
      <title>Convert Minutes</title>
      <statement>
        <p>We need to convert a number of minutes to hours-and-minutes. For example, 83 minutes is equal to 1 hour and 23 minutes.</p>
        <p>Write a few lines of code to do the following:</p>
        <p>
          <ol>
            <li>Read an input and convert it to an integer; assign that value to the name <c>total_minutes</c>. (You can assume that the input will have a suitable form for representing a positive integer.)</li>
            <li>Use integer division (//) to determine how many full hours can fit into the given number of minutes; assign that value to the name <c>hrs</c>.</li>
            <li>Use the remainder operator (%) to determine how many minutes are "left over" after removing as many whole hours as possible; assign that value to the name <c>mins</c>.</li>
            <li>Print a message reporting the results of your computation.</li>
          </ol>
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>314</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>314 minutes equals 5 hours and 14 minutes</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>230</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>230 minutes equals 3 hours and 50 minutes</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>15</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>15 minutes equals 0 hours and 15 minutes</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>314</input>
            <output>314 minutes equals 5 hours and 14 minutes</output>
          </iotest>
          <iotest>
            <input>230</input>
            <output>230 minutes equals 3 hours and 50 minutes</output>
          </iotest>
          <iotest>
            <input>15</input>
            <output>15 minutes equals 0 hours and 15 minutes</output>
          </iotest>
          <iotest>
            <input>120</input>
            <output>120 minutes equals 2 hours and 0 minutes</output>
          </iotest>
          <iotest>
            <input>654</input>
            <output>654 minutes equals 10 hours and 54 minutes</output>
          </iotest>
          <iotest>
            <input>54321</input>
            <output>54321 minutes equals 905 hours and 21 minutes</output>
          </iotest>
        </tests>
      </program>
    </exercise>
  </exercises>
</section>
