<section xml:id="sec-HW7-1-practice">
  <title>HW7 Practice</title>
  <introduction />
  <exercises>
    <exercise xml:id="exer-swap_list_ends-1-practice" label="exe-sec-HW7-1-103572-practice">
      <title>Swap List Ends</title>
      <statement>
        <p>The function <c>swap_list_ends</c> takes one parameter, <c>L</c>, which is a list. The function then swaps the first and last items in <c>L</c> and returns the object <c>None</c>.  Notice that since <c>L</c> is mutable, the changes the function makes to <c>L</c> are <em>visible back in the calling program</em>.</p>
        <p>SPECIAL CASE: If the list L has length less than 2, then the function does nothing to L and returns <c>None</c>.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="60%" />
          <col top="minor" width="40%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>swap_list_ends([1, 3, 9, 2])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[2, 3, 9, 1]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>swap_list_ends(['super', 'awesome', 'excellent'])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['excellent', 'awesome', 'super']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>swap_list_ends([True, False])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[False, True]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    lst = [1, 3, 9, 2]
    res = swap_list_ends(lst)
    self.assertEqual(lst, [2, 3, 9, 1], "swap_list_ends([1, 3, 9, 2])")
    self.assertEqual(res, None, "function should return None")

  def test2(self):
    lst = ['super', 'awesome', 'excellent']
    res = swap_list_ends(lst)
    self.assertEqual(lst, ['excellent', 'awesome', 'super'], "swap_list_ends(['super', 'awesome', 'excellent'])")
    self.assertEqual(res, None, "function should return None")

  def test3(self):
    lst = [['a', 'b'], ['c', 'd', 'e']]
    res = swap_list_ends(lst)
    self.assertEqual(lst, [['c', 'd', 'e'], ['a', 'b']], "swap_list_ends([['a', 'b'], ['c', 'd', 'e']])")
    self.assertEqual(res, None, "function should return None")

  def test4(self):
    lst = [True, False]
    res = swap_list_ends(lst)
    self.assertEqual(lst, [False, True], "swap_list_ends([True, False])")
    self.assertEqual(res, None, "function should return None")

  def test5(self):
    lst = ['just one thing']
    res = swap_list_ends(lst)
    self.assertEqual(lst, ['just one thing'], "swap_list_ends(['just one thing'])")
    self.assertEqual(res, None, "function should return None")

  def test6(self):
    lst = []
    res = swap_list_ends(lst)
    self.assertEqual(lst, [], "swap_list_ends([])")
    self.assertEqual(res, None, "function should return None")

  def test7(self):
    lst = [5]
    res = swap_list_ends(lst)
    self.assertEqual(lst, [5], "swap_list_ends([5])")
    self.assertEqual(res, None, "function should return None")

  def test8(self):
    lst = ['o', 'u', 't', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g']
    res = swap_list_ends(lst)
    self.assertEqual(lst, ['g', 'u', 't', 's', 't', 'a', 'n', 'd', 'i', 'n', 'o'], "swap_list_ends(['o', 'u', 't', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g'])")
    self.assertEqual(res, None, "function should return None")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-make_list_items_upper_2-3-practice" label="exe-sec-HW7-1-31105-practice">
      <title>Make List Items Uppercase 2</title>
      <statement>
        <p>Define the function <c>make_uppercase(mylist)</c>, which takes a list parameter <c>mylist</c> (a list of strings), mutates the list by uppercasing each string in mylist. The function returns <c>None</c>.</p>
        <p>For example, if <c>mylist</c> is <c>['cat', 'Dog', 'frOG']</c>, then the mutated list should  be <c>['CAT', 'DOG', 'FROG']</c>.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="60%" />
          <col top="minor" width="40%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>make_uppercase(['cat', 'Dog', 'frOG'])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['CAT', 'DOG', 'FROG']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>make_uppercase(['baNanas', 'appLes', 'pEAches', 'PEArs'])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['BANANAS', 'APPLES', 'PEACHES', 'PEARS']</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    lst = ['cat', 'Dog', 'frOG']
    res = make_uppercase(lst)
    self.assertEqual(lst, ['CAT', 'DOG', 'FROG'], "make_uppercase(['cat', 'Dog', 'frOG'])")
    self.assertEqual(res, None, "function should return None")

  def test2(self):
    lst = ['baNanas', 'appLes', 'pEAches', 'PEArs']
    res = make_uppercase(lst)
    self.assertEqual(lst, ['BANANAS', 'APPLES', 'PEACHES', 'PEARS'], "make_uppercase(['baNanas', 'appLes', 'pEAches', 'PEArs'])")
    self.assertEqual(res, None, "function should return None")

  def test3(self):
    lst = ['w', 'x', 'y', 'z', 'yes']
    res = make_uppercase(lst)
    self.assertEqual(lst, ['W', 'X', 'Y', 'Z', 'YES'], "make_uppercase(['w', 'x', 'y', 'z', 'yes'])")
    self.assertEqual(res, None, "function should return None")

  def test4(self):
    lst = []
    res = make_uppercase(lst)
    self.assertEqual(lst, [], "make_uppercase([])")
    self.assertEqual(res, None, "function should return None")

  def test5(self):
    lst = ['cOw', 'HoRse', 'pig', 'BUNNy']
    res = make_uppercase(lst)
    self.assertEqual(lst, ['COW', 'HORSE', 'PIG', 'BUNNY'], "make_uppercase(['cOw', 'HoRse', 'pig', 'BUNNy'])")
    self.assertEqual(res, None, "function should return None")

myTests().main()
</tests>      </program>
    </exercise>
    <exercise xml:id="exer-square_nums_2-1-practice" label="exe-sec-HW7-1-31106-practice">
      <title>Square Nums 2</title>
      <statement>
        <p>Define the function <c>square_nums_2</c> which takes a list of numbers, <alert>L</alert>, and mutates <alert>L</alert> so that each original item is now squared. For example, if L is <c>[2, -5, 9]</c> then, after calling <c>square_nums_2(L)</c>, <c>L == [4, 25, 81]</c>.</p>
        <p>Nothing is printed and None is returned.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>square_nums_2([0, 1, 2, 3])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[0, 1, 4, 9]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>square_nums_2([5])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[25]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>square_nums_2([])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    lst = [0, 1, 2, 3]
    res = square_nums_2(lst)
    self.assertEqual(lst, [0, 1, 4, 9], "square_nums_2([0, 1, 2, 3])")
    self.assertEqual(res, None, "function should return None")

  def test2(self):
    lst = [5]
    res = square_nums_2(lst)
    self.assertEqual(lst, [25], "square_nums_2([5])")
    self.assertEqual(res, None, "function should return None")

  def test3(self):
    lst = []
    res = square_nums_2(lst)
    self.assertEqual(lst, [], "square_nums_2([])")
    self.assertEqual(res, None, "function should return None")

  def test4(self):
    lst = [-1, 1, -2, 2, -3, 3]
    res = square_nums_2(lst)
    self.assertEqual(lst, [1, 1, 4, 4, 9, 9], "square_nums_2([-1, 1, -2, 2, -3, 3])")
    self.assertEqual(res, None, "function should return None")

  def test5(self):
    lst = [9, 94, 39, 60, 99, 83]
    res = square_nums_2(lst)
    self.assertEqual(lst, [81, 8836, 1521, 3600, 9801, 6889], "square_nums_2([9, 94, 39, 60, 99, 83])")
    self.assertEqual(res, None, "function should return None")

  def test6(self):
    lst = [99, 9, 94, 39, 60, 83, 99]
    res = square_nums_2(lst)
    self.assertEqual(lst, [9801, 81, 8836, 1521, 3600, 6889, 9801], "square_nums_2([99, 9, 94, 39, 60, 83, 99])")
    self.assertEqual(res, None, "function should return None")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-nested_accum_hyphenated_pairs-1-practice" label="exe-sec-HW7-1-32007-practice">
      <title>Hyphenated Pairs with Nested Loop</title>
      <statement>
        <p>Define the function <c>get_pairs</c>, which takes a list L of strings, such as</p>
        <pre>L = ['r', 'g']</pre>
        <p>and returns a list of all the hyphenated pairs of strings from the list (returns a list of strings, such as <c>['r-r', 'r-g', 'g-r', 'g-g']</c>)</p>
        <p>Use a double for loop or list comprehension to accumulate the result.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="50%" />
          <col top="minor" width="50%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>get_pairs(['yes', 'no', 'maybe'])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['yes-yes', 'yes-no', 'yes-maybe',
 'no-yes', 'no-no', 'no-maybe',
 'maybe-yes', 'maybe-no', 'maybe-maybe']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>get_pairs(["X", "x"])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['X-X', 'X-x', 'x-X', 'x-x']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>get_pairs([])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    lst = ['yes', 'no', 'maybe']
    res = get_pairs(lst)
    self.assertEqual(res, ['yes-yes', 'yes-no', 'yes-maybe', 'no-yes', 'no-no', 'no-maybe', 'maybe-yes', 'maybe-no', 'maybe-maybe'], "get_pairs(['yes', 'no', 'maybe'])")

  def test2(self):
    lst = ['angel', 'gold', 'cat', 'puffer', 'damsel']
    res = get_pairs(lst)
    self.assertEqual(res, ['angel-angel', 'angel-gold', 'angel-cat', 'angel-puffer', 'angel-damsel', 'gold-angel', 'gold-gold', 'gold-cat', 'gold-puffer', 'gold-damsel', 'cat-angel', 'cat-gold', 'cat-cat', 'cat-puffer', 'cat-damsel', 'puffer-angel', 'puffer-gold', 'puffer-cat', 'puffer-puffer', 'puffer-damsel', 'damsel-angel', 'damsel-gold', 'damsel-cat', 'damsel-puffer', 'damsel-damsel'], "get_pairs(['angel', 'gold', 'cat', 'puffer', 'damsel'])")

  def test3(self):
    lst = ['X', 'x']
    res = get_pairs(lst)
    self.assertEqual(res, ['X-X', 'X-x', 'x-X', 'x-x'], "get_pairs(['X', 'x'])")

  def test4(self):
    lst = []
    res = get_pairs(lst)
    self.assertEqual(res, [], "get_pairs([])")

  def test5(self):
    lst = ['UNO']
    res = get_pairs(lst)
    self.assertEqual(res, ['UNO-UNO'], "get_pairs(['UNO'])")

  def test6(self):
    lst = ['apple', 'cheese', 'bread']
    res = get_pairs(lst)
    self.assertEqual(res, ['apple-apple', 'apple-cheese', 'apple-bread', 'cheese-apple', 'cheese-cheese', 'cheese-bread', 'bread-apple', 'bread-cheese', 'bread-bread'], "get_pairs(['apple', 'cheese', 'bread'])")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-print_stars_grid_nested_loop-1-practice" label="exe-sec-HW7-1-271584-practice">
      <title>Print Grid of Asterisks with a Nested Loop</title>
      <statement>
        <p>Define a function <c>print_star_grid(rows, cols)</c>, which takes two positive integers as parameters and prints a rectangular grid of asterisks in response. <alert>rows</alert> indicates the number of rows to be printed, and <alert>cols</alert> indicates the number of columns (i.e., the length of each row).</p>
        <p>After each <c>"*"</c>, print a space (to match the examples).</p>
        <p>Hints:</p>
        <p>
          <ul>
            <li>For each r in range(rows), for each c in range(cols), print <c>"*  "</c> (a star followed by a space).</li>
            <li>To prevent going to a new line each time, include <alert>keyword argument:</alert><alert>end =</alert><alert>""</alert> in  your print call.</li>
            <li>Make a call to <alert>print() with no arguments</alert> each time the inner loop finishes (to make the end of a row).</li>
          </ul>
        </p>
        <p><alert>Note</alert>: This function does NOT explicitly return a value.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_star_grid(2,3)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>* * *
* * *</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_star_grid(1,1)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>*</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_star_grid(5,5)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>* * * * *
* * * * *
* * * * *
* * * * *
* * * * *</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    sys.stdout = StringIO.StringIO()
    print_star_grid(2, 3)
    res = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    self.assertEqual(res, '* * * \n* * * \n', "print_star_grid(2, 3)")

  def test2(self):
    sys.stdout = StringIO.StringIO()
    print_star_grid(1, 1)
    res = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    self.assertEqual(res, '* \n', "print_star_grid(1, 1)")

  def test3(self):
    sys.stdout = StringIO.StringIO()
    print_star_grid(5, 5)
    res = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    self.assertEqual(res, '* * * * * \n* * * * * \n* * * * * \n* * * * * \n* * * * * \n', "print_star_grid(5, 5)")

  def test4(self):
    sys.stdout = StringIO.StringIO()
    print_star_grid(3, 2)
    res = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    self.assertEqual(res, '* * \n* * \n* * \n', "print_star_grid(3, 2)")

  def test5(self):
    sys.stdout = StringIO.StringIO()
    print_star_grid(7, 3)
    res = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    self.assertEqual(res, '* * * \n* * * \n* * * \n* * * \n* * * \n* * * \n* * * \n', "print_star_grid(7, 3)")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-print_X_O_grid_nested_loop-1-practice" label="exe-sec-HW7-1-103574-practice">
      <title>Print X's and O's in a Grid with a Nested Loop</title>
      <statement>
        <p>Define a function <c>print_XO_grid(rows, cols)</c>, which takes two positive integers as parameters and prints a rectangular grid of X's and O's in response. rows indicates the number of rows to be printed, and cols indicates the number of columns (i.e., the length of each row).</p>
        <p>After each "X" or "O", print a space (to match the examples).</p>
        <p>Hints:</p>
        <p>
          <ul>
            <li>For each r in range(rows), for each c in range(cols), print "X " if r + c is even; otherwise, print "O ".</li>
            <li>To prevent going to a new line each time, include <alert>keyword argument:</alert><c>end = ""</c> in  your print call.</li>
            <li>Make a call to <alert>print() with no arguments</alert> each time the inner loop finishes (to make the end of a row).</li>
          </ul>
        </p>
        <p><alert>Note</alert>: This function does NOT explicitly return a value.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_XO_grid(2,3)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>X O X
O X O</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_XO_grid(3,2)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>X O
O X
X O</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    sys.stdout = StringIO.StringIO()
    print_XO_grid(2, 3)
    res = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    self.assertEqual(res, 'X O X \nO X O \n', "print_XO_grid(2, 3)")

  def test2(self):
    sys.stdout = StringIO.StringIO()
    print_XO_grid(1, 1)
    res = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    self.assertEqual(res, 'X \n', "print_XO_grid(1, 1)")

  def test3(self):
    sys.stdout = StringIO.StringIO()
    print_XO_grid(5, 5)
    res = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    self.assertEqual(res, 'X O X O X \nO X O X O \nX O X O X \nO X O X O \nX O X O X \n', "print_XO_grid(5, 5)")

  def test4(self):
    sys.stdout = StringIO.StringIO()
    print_XO_grid(3, 2)
    res = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    self.assertEqual(res, 'X O \nO X \nX O \n', "print_XO_grid(3, 2)")

  def test5(self):
    sys.stdout = StringIO.StringIO()
    print_XO_grid(7, 3)
    res = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    self.assertEqual(res, 'X O X \nO X O \nX O X \nO X O \nX O X \nO X O \nX O X \n', "print_XO_grid(7, 3)")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-nested_list_sum_up_all_items-1-practice" label="exe-sec-HW7-1-31565-practice">
      <title>Sum of Nested List Items</title>
      <statement>
        <p>Define the function <c>sum_nested(L)</c>, which takes parameter L (a list of lists of integers) and returns the sum of all the elements of all the inner lists of L.</p>
        <p>For example, if <c>L = [[1, 2], [3, 3, 2], [7, -6]]</c>, then <c>sum_nested(L)</c> would return 1 + 2 + 3 + 3 + 2 + 7 + (-6) = 12.</p>
        <p>TO DO:</p>
        <p>Write a double for loop to accumulate the sum.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>sum_nested([[5]])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>5</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>sum_nested([[1,2],[8,7,6]])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>24</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>sum_nested([])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    res = sum_nested([[5]])
    self.assertEqual(res, 5, "sum_nested([[5]])")

  def test2(self):
    res = sum_nested([[1, 2], [8, 7, 6]])
    self.assertEqual(res, 24, "sum_nested([[1, 2], [8, 7, 6]])")

  def test3(self):
    res = sum_nested([])
    self.assertEqual(res, 0, "sum_nested([])")

  def test4(self):
    res = sum_nested([[5, 4], [3, 1, 1, 1, 10], [2], [4]])
    self.assertEqual(res, 31, "sum_nested([[5, 4], [3, 1, 1, 1, 10], [2], [4]])")

  def test5(self):
    res = sum_nested([[1], [2, 3], [-3, -2, -1, 0]])
    self.assertEqual(res, 0, "sum_nested([[1], [2, 3], [-3, -2, -1, 0]])")

  def test6(self):
    res = sum_nested([[1, 1, 1], [2, 3, 2], [5, 5, 5], [10, 11, 12, 13, 14]])
    self.assertEqual(res, 85, "sum_nested([[1, 1, 1], [2, 3, 2], [5, 5, 5], [10, 11, 12, 13, 14]])")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-gen_triples-1-practice" label="exe-sec-HW7-1-103575-practice">
      <title>Triplets</title>
      <statement>
        <p>The function <c>gen_triples</c> takes one parameter, <c>L</c>, a list of characters (i.e., strings of length one). The function returns a list of all possible 3-character strings that can be made from the characters in <c>L</c>.</p>
        <p>For example, if <c>L = ['n', 'o']</c>, then <c>gen_triples(L)</c> should return the list:</p>
        <p><c>['nnn', 'nno', 'non',
'noo', 'onn', 'ono', 'oon', 'ooo']</c></p>
        <p>If <c>L</c> is empty, gen_triples returns an empty list.</p>
        <p><alert>Hint:</alert> Use a <alert><em>triple</em></alert><em><alert>nested for loop</alert></em> or a list comprehension to accumulate the list of triples.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>gen_triples(['n', 'o'])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['nnn', 'nno', 'non', 'noo',
 'onn', 'ono', 'oon', 'ooo']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>gen_triples(['?'])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['???']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>gen_triples([])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>
def gen_triples(L):
        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    res = gen_triples(['n', 'o'])
    res.sort()
    self.assertEqual(res, ['nnn', 'nno', 'non', 'noo', 'onn', 'ono', 'oon', 'ooo'], "gen_triples(['n', 'o'])")

  def test2(self):
    res = gen_triples(['?'])
    res.sort()
    self.assertEqual(res, ['???'], "gen_triples(['?'])")

  def test3(self):
    res = gen_triples([])
    res.sort()
    self.assertEqual(res, [], "gen_triples([])")

  def test4(self):
    res = gen_triples(['x', 'y', 'z', 'w'])
    res.sort()
    self.assertEqual(res, ['www', 'wwx', 'wwy', 'wwz', 'wxw', 'wxx', 'wxy', 'wxz', 'wyw', 'wyx', 'wyy', 'wyz', 'wzw', 'wzx', 'wzy', 'wzz', 'xww', 'xwx', 'xwy', 'xwz', 'xxw', 'xxx', 'xxy', 'xxz', 'xyw', 'xyx', 'xyy', 'xyz', 'xzw', 'xzx', 'xzy', 'xzz', 'yww', 'ywx', 'ywy', 'ywz', 'yxw', 'yxx', 'yxy', 'yxz', 'yyw', 'yyx', 'yyy', 'yyz', 'yzw', 'yzx', 'yzy', 'yzz', 'zww', 'zwx', 'zwy', 'zwz', 'zxw', 'zxx', 'zxy', 'zxz', 'zyw', 'zyx', 'zyy', 'zyz', 'zzw', 'zzx', 'zzy', 'zzz'], "gen_triples(['x', 'y', 'z', 'w'])")

  def test5(self):
    res = gen_triples(['d', 'o', 'g', 's'])
    res.sort()
    self.assertEqual(res, ['ddd', 'ddg', 'ddo', 'dds', 'dgd', 'dgg', 'dgo', 'dgs', 'dod', 'dog', 'doo', 'dos', 'dsd', 'dsg', 'dso', 'dss', 'gdd', 'gdg', 'gdo', 'gds', 'ggd', 'ggg', 'ggo', 'ggs', 'god', 'gog', 'goo', 'gos', 'gsd', 'gsg', 'gso', 'gss', 'odd', 'odg', 'odo', 'ods', 'ogd', 'ogg', 'ogo', 'ogs', 'ood', 'oog', 'ooo', 'oos', 'osd', 'osg', 'oso', 'oss', 'sdd', 'sdg', 'sdo', 'sds', 'sgd', 'sgg', 'sgo', 'sgs', 'sod', 'sog', 'soo', 'sos', 'ssd', 'ssg', 'sso', 'sss'], "gen_triples(['d', 'o', 'g', 's'])")

myTests().main()
</tests>

      </program>
    </exercise>
    <exercise xml:id="exer-add_entry_to_dictionary-1-practice" label="exe-sec-HW7-1-32141-practice">
      <title>Add Entry</title>
      <statement>
        <p>The function <c>add_entry</c> takes a dictionary <c>D</c> and two additional parameters, <c>new_key</c> and <c>new_val</c>. The function adds <c>new_key</c> to the dictionary, using <c>new_val</c> for the value of <c>D[new_key]</c>.</p>
        <p><alert>Hint</alert>: <c>add_entry</c> prints nothing and returns nothing; it simply mutates (i.e., changes the value of) D by adding a new key-value pair.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>D = {
    'Hitting Percent': 0.174,
    'Blocks': 5.0,
    'Digs': 47,
    'Aces': 7
}
add_entry(D, 'Spikes', 42)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>correctly added Spikes:42</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>D = {'wins': 9, 'losses': 2}
add_entry(D, 'ties', 1)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>correctly added ties:1</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    D = {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}
    add_entry(D, 'Spikes', 42)
    self.assertEqual(D, {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7, 'Spikes': 42}, "&lt;pre&gt;D: {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}\nkey: 'Spikes'\nvalue: 42&lt;/pre&gt;")

  def test2(self):
    D = {'wins': 9, 'losses': 2}
    add_entry(D, 'ties', 1)
    self.assertEqual(D, {'wins': 9, 'losses': 2, 'ties': 1}, "&lt;pre&gt;D: {'wins': 9, 'losses': 2}\nkey: 'ties'\nvalue: 1&lt;/pre&gt;")

  def test3(self):
    D = {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}
    add_entry(D, 'minor', "Counting sheep")
    self.assertEqual(D, {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022, 'minor': 'Counting sheep'}, "&lt;pre&gt;D: {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}\nkey: 'minor'\nvalue: 'Counting sheep'&lt;/pre&gt;")

  def test4(self):
    D = {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}
    add_entry(D, 20, 400)
    self.assertEqual(D, {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 20: 400}, "&lt;pre&gt;D: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}\nkey: 20\nvalue: 400&lt;/pre&gt;")

  def test5(self):
    D = {}
    add_entry(D, 'wins', 100)
    self.assertEqual(D, {'wins': 100}, "&lt;pre&gt;D: {}\nkey: 'wins'\nvalue: 100&lt;/pre&gt;")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-delete_entry_from_dictionary-1-practice" label="exe-sec-HW7-1-32142-practice">
      <title>Delete Entry</title>
      <statement>
        <p>The function <c>delete_entry</c> takes a parameter <c>D</c> (a dictionary) and a parameter <c>k</c> (a supposed key in <c>D</c>).</p>
        <p>
          <ul>
            <li>The function <alert>removes</alert>the entry whose key is <c>k</c> and returns the value that was associated with <c>k</c>.</li>
            <li><em>However</em>, if <c>k</c> is <alert>not</alert>a key in <c>D</c>, the function leaves <c>D</c> unchanged and returns the value <c>None</c>.</li>
          </ul>
        </p>
        <p>Hint: <c>D.pop(k)</c> is helpful here, but first you need to handle the case where k is <alert>not</alert> a key in D. You can search online to learn more, using search string: <em>python dictionary delete item</em></p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>D = {
    'Hitting Percent': 0.174,
    'Blocks': 5.0,
    'Digs': 47,
    'Aces': 7
}
delete_entry(D, 'Digs')</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>47</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>D = {'wins': 9, 'losses': 2}
delete_entry(D, 'ties')</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>None</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    D = {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}
    v = delete_entry(D, 'Digs')
    self.assertEqual(v, 47, "D: {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}\nkey: 'Digs'\nreturn value is correct")
    self.assertEqual(D, {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Aces': 7}, "D: {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}\nkey: 'Digs'\nupdated dictionary")

  def test2(self):
    D = {'wins': 9, 'losses': 2}
    v = delete_entry(D, 'ties')
    self.assertEqual(v, None, "D: {'wins': 9, 'losses': 2}\nkey: 'ties'\nreturn value is correct")
    self.assertEqual(D, {'wins': 9, 'losses': 2}, "D: {'wins': 9, 'losses': 2}\nkey: 'ties'\nupdated dictionary")

  def test3(self):
    D = {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}
    v = delete_entry(D, 'major2 gpa')
    self.assertEqual(v, 3.4, "D: {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}\nkey: 'major2 gpa'\nreturn value is correct")
    self.assertEqual(D, {'major1 gpa': 3.7, 'credits': 17, 'graduation year': 2022}, "D: {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}\nkey: 'major2 gpa'\nupdated dictionary")

  def test4(self):
    D = {0: -1, 1: 0, 2: 3, 3: 8, 4: 15, 5: 24, 6: 35, 7: 48, 8: 63, 9: 80, 10: 99}
    v = delete_entry(D, 12)
    self.assertEqual(v, None, "D: {0: -1, 1: 0, 2: 3, 3: 8, 4: 15, 5: 24, 6: 35, 7: 48, 8: 63, 9: 80, 10: 99}\nkey: 12\nreturn value is correct")
    self.assertEqual(D, {0: -1, 1: 0, 2: 3, 3: 8, 4: 15, 5: 24, 6: 35, 7: 48, 8: 63, 9: 80, 10: 99}, "D: {0: -1, 1: 0, 2: 3, 3: 8, 4: 15, 5: 24, 6: 35, 7: 48, 8: 63, 9: 80, 10: 99}\nkey: 12\nupdated dictionary")

  def test5(self):
    D = {}
    v = delete_entry(D, 'wins')
    self.assertEqual(v, None, "D: {}\nkey: 'wins'\nreturn value is correct")
    self.assertEqual(D, {}, "D: {}\nkey: 'wins'\nupdated dictionary")

myTests().main()
</tests>

      </program>
    </exercise>
    <exercise xml:id="exer-dictionary_has_key-1-practice" label="exe-sec-HW7-1-32129-practice">
      <title>Has Key</title>
      <statement>
        <p>The function <c>has_key</c> takes two parameters: <c>D</c> and <c>k</c>, where <c>D</c> is a dictionary and <c>k</c> is a possible key in <c>D</c>. The function returns <c>True</c> if <c>k</c> is a <em>key</em> in the dictionary <c>D</c> and <c>False</c> otherwise.</p>
        <p><alert>Hint:</alert>Read up on using the <c>in</c> operator with dictionaries.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>D = {
    'Hitting Percent': 0.174,
    'Blocks': 5.0,
    'Digs': 47,
    'Aces': 7
}
has_key(D, 'Blocks')</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>True</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>D = {
    'Hitting Percent': 0.174,
    'Blocks': 5.0,
    'Digs': 47,
    'Aces': 7
}
has_key(D, 'Spikes')</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>False</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    D = {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}
    res = has_key(D, 'Digs')
    self.assertEqual(res, True, "D: {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}\nkey: 'Digs'")

  def test2(self):
    D = {'wins': 9, 'losses': 2}
    res = has_key(D, 'ties')
    self.assertEqual(res, False, "D: {'wins': 9, 'losses': 2}\nkey: 'ties'")

  def test3(self):
    D = {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}
    res = has_key(D, 'major2 gpa')
    self.assertEqual(res, True, "D: {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}\nkey: 'major2 gpa'")

  def test4(self):
    D = {0: -1, 1: 0, 2: 3, 3: 8, 4: 15, 5: 24, 6: 35, 7: 48, 8: 63, 9: 80, 10: 99}
    res = has_key(D, 12)
    self.assertEqual(res, False, "D: {0: -1, 1: 0, 2: 3, 3: 8, 4: 15, 5: 24, 6: 35, 7: 48, 8: 63, 9: 80, 10: 99}\nkey: 12")

  def test5(self):
    D = {}
    res = has_key(D, 'wins')
    self.assertEqual(res, False, "D: {}\nkey: 'wins'")

myTests().main()
</tests>

      </program>
    </exercise>
    <exercise xml:id="exer-dictionary_has_value-1-practice" label="exe-sec-HW7-1-160598-practice">
      <title>Has Value</title>
      <statement>
        <p>The function <c>has_value</c> takes two parameters: a dictionary <c>D</c> and a number <c>num</c>. The function returns <c>True</c> if <c>num</c> is a <em>value</em> in dictionary <c>D</c>; otherwise, it returns <c>False</c>.</p>
        <p><alert>Hint:</alert>Remind yourself about the various operators and methods for dictionaries.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>D = {
    'Hitting Percent': 0.174,
    'Blocks': 5.0,
    'Digs': 47,
    'Aces': 7
}
has_value(D, 47)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>True</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>D = {
    'Hitting Percent': 0.174,
    'Blocks': 5.0,
    'Digs': 47,
    'Aces': 7
}
has_value(D, 3047)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>False</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    D = {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}
    res = has_value(D, 47)
    self.assertEqual(res, True, "D: {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}\nnum: 47")

  def test2(self):
    D = {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}
    res = has_value(D, 3047)
    self.assertEqual(res, False, "D: {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}\nnum: 3047")

  def test3(self):
    D = {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}
    res = has_value(D, 2022)
    self.assertEqual(res, True, "D: {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}\nnum: 2022")

  def test4(self):
    D = {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}
    res = has_value(D, 2020)
    self.assertEqual(res, False, "D: {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}\nnum: 2020")

  def test5(self):
    D = {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}
    res = has_value(D, 3.7)
    self.assertEqual(res, True, "D: {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}\nnum: 3.7")

myTests().main()
</tests>

      </program>
    </exercise>
    <exercise xml:id="exer-dictionary_num_pairs-1-practice" label="exe-sec-HW7-1-32126-practice">
      <title>Get Num Pairs</title>
      <statement>
        <p>The function <c>get_num_pairs</c> takes one parameter, <c>D</c>, which is a dictionary. The function returns the <alert>number</alert>of key-value pairs in <c>D</c>.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="80%" />
          <col top="minor" width="20%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>D = {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}
get_num_pairs(D)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>4</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>D = {'wins': 9, 'losses': 2}
get_num_pairs(D)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>2</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):

  def test1(self):
    D = {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}
    res = get_num_pairs(D)
    self.assertEqual(res, 4, "D: {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}")

  def test2(self):
    D = {'wins': 9, 'losses': 2}
    res = get_num_pairs(D)
    self.assertEqual(res, 2, "D: {'wins': 9, 'losses': 2}")

  def test3(self):
    D = {'major1 gpa': 3.7, 'credits': 17, 'graduation year': 2022}
    res = get_num_pairs(D)
    self.assertEqual(res, 3, "D: {'major1 gpa': 3.7, 'credits': 17, 'graduation year': 2022}")

  def test4(self):
    D = {}
    res = get_num_pairs(D)
    self.assertEqual(res, 0, "D: {}")

  def test5(self):
    D = { chr(i): i for i in range(50, 101) }
    res = get_num_pairs(D)
    self.assertEqual(res, 51, "Dictionary with many entries")

myTests().main()
</tests>

      </program>
    </exercise>
    <exercise xml:id="exer-build_dictionary-1-practice" label="exe-sec-HW7-1-161337-practice">
      <title>Build Dictionary</title>
      <statement>
        <p>Define the function <c>build_dictionary</c> which takes two parameters, <c>key_list</c> and <c>value_list</c>.  The function returns a dictionary.</p>
        <p>
          <ul>
            <li>Both lists have the same length.</li>
            <li>The two lists are organized such that each item in <c>key_list</c> can be matched up with the item at the corresponding index in <c>value_list</c> to form a key-value pair for a dictionary.</li>
            <li>For example, if <c>key_list</c> is <c>['a', 'b', 'c']</c> and <c>value_list</c>is <c>['yes', 'no', 'maybe']</c>, then the new dictionary should contain these pairs: <c>'a':'yes', 'b':'no', 'c':'maybe'</c></li>
          </ul>
        </p>
        <p>Implement the function so that it <em><alert>accumulates</alert></em> a new dictionary.</p>
        <p>
          <ol>
            <li>Initialize D to an empty dictionary, <c>{}</c></li>
            <li>Iterate k over an appropriate range of indices</li>
            <li>Inside the loop, update D by giving D a new pair, using <c>key_list[k]</c> and <c>value_list[k]</c></li>
          </ol>
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="50%" />
          <col top="minor" width="50%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>key_list = ['Blocks', 'Digs', 'Aces']
value_list = [5.0, 47, 7]
build_dictionary(key_list, value_list)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>{'Blocks': 5.0, 'Digs': 47, 'Aces': 7}</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>key_list = ['wins', 'losses']
value_list = [9, 2]
build_dictionary(key_list, value_list)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>{'wins': 9, 'losses': 2}</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    keys = ['Hitting Percent', 'Blocks', 'Digs', 'Aces']
    values = [0.174, 5.0, 47, 7]
    D = build_dictionary(keys, values)
    self.assertEqual(D, {'Hitting Percent': 0.174, 'Blocks': 5.0, 'Digs': 47, 'Aces': 7}, "&lt;pre&gt;keys: ['Hitting Percent', 'Blocks', 'Digs', 'Aces']\nvalues: [0.174, 5.0, 47, 7]&lt;/pre&gt;")

  def test2(self):
    keys = ['wins', 'losses']
    values = [9, 2]
    D = build_dictionary(keys, values)
    self.assertEqual(D, {'wins': 9, 'losses': 2}, "&lt;pre&gt;keys: ['wins', 'losses']\nvalues: [9, 2]&lt;/pre&gt;")

  def test3(self):
    keys = ['major1 gpa', 'major2 gpa', 'credits', 'graduation year']
    values = [3.7, 3.4, 17, 2022]
    D = build_dictionary(keys, values)
    self.assertEqual(D, {'major1 gpa': 3.7, 'major2 gpa': 3.4, 'credits': 17, 'graduation year': 2022}, "&lt;pre&gt;keys: ['major1 gpa', 'major2 gpa', 'credits', 'graduation year']\nvalues: [3.7, 3.4, 17, 2022]&lt;/pre&gt;")

  def test4(self):
    keys = ['First Years', 'Sophomores', 'Juniors', 'Seniors']
    values = [135, 114, 109, 105]
    D = build_dictionary(keys, values)
    self.assertEqual(D, {'First Years': 135, 'Sophomores': 114, 'Juniors': 109, 'Seniors': 105}, "&lt;pre&gt;keys: ['First Years', 'Sophomores', 'Juniors', 'Seniors']\nvalues: [135, 114, 109, 105]&lt;/pre&gt;")

  def test5(self):
    keys = ['x', 'a', 'u', 't', 'ww']
    values = ['pizza', 'steak', 'sushi', 'dim sum', 'tuna']
    D = build_dictionary(keys, values)
    self.assertEqual(D, {'x': 'pizza', 'a': 'steak', 'u': 'sushi', 't': 'dim sum', 'ww': 'tuna'}, "&lt;pre&gt;keys: ['x', 'a', 'u', 't', 'ww']\nvalues: ['pizza', 'steak', 'sushi', 'dim sum', 'tuna']&lt;/pre&gt;")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-find_frequencies_dictionary_of_list-1-practice" label="exe-sec-HW7-1-103581-practice">
      <title>Accumulate Frequencies Dictionary</title>
      <statement>
        <p>The function <c>get_freq_dict(L)</c> takes a list of integers and <alert>returns</alert>a dictionary D such that for each number x in L, D[x] is the frequency of x in L.</p>
        <p>TO DO: Accumulate D as explained in your textbook. Read up on how to generate a frequency table using a dictionary if the following hint leaves you puzzled.</p>
        <p>Hint: Use the accumulator pattern.</p>
        <p>
          <ol>
            <li>Initialize D to be an empty dictionary: <c>D  = {}</c></li>
            <li>
              <p>
                For each x in L:
                <ul>
                  <li>if x is already a key in D, update the frequency  of x: <c>D[x] = D[x] + 1</c></li>
                  <li>else, make x:1 a new pair in D</li>
                </ul>
              </p>
            </li>
            <li>When the loop has finished, return D.</li>
          </ol>
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="60%" />
          <col top="minor" width="40%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>get_freq_dict([1, 5, 25, 5, 1])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>{1: 2, 5: 2, 25: 1}</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>get_freq_dict([17])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>{17: 1}</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>get_freq_dict([1, 1, 1, 1, 2, 2, 2, 3, 3, 4])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>{1: 4, 2: 3, 3: 2, 4: 1}</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    D = get_freq_dict([1, 5, 25, 5, 1])
    self.assertEqual(D, {1: 2, 5: 2, 25: 1}, "get_freq_dict([1, 5, 25, 5, 1])")

  def test2(self):
    D = get_freq_dict([5, 5, 5, 5, 5, 3])
    self.assertEqual(D, {5: 5, 3: 1}, "get_freq_dict([5, 5, 5, 5, 5, 3])")

  def test3(self):
    D = get_freq_dict([17])
    self.assertEqual(D, {17: 1}, "get_freq_dict([17])")

  def test4(self):
    D = get_freq_dict([0, 1, 2, 3, 4])
    self.assertEqual(D, {0: 1, 1: 1, 2: 1, 3: 1, 4: 1}, "get_freq_dict([0, 1, 2, 3, 4])")

  def test5(self):
    D = get_freq_dict([0, 1, 2, 0, 1, 2, 3, 4])
    self.assertEqual(D, {0: 2, 1: 2, 2: 2, 3: 1, 4: 1}, "get_freq_dict([0, 1, 2, 0, 1, 2, 3, 4])")

  def test6(self):
    D = get_freq_dict([1, 1, 1, 1, 2, 2, 2, 3, 3, 4])
    self.assertEqual(D, {1: 4, 2: 3, 3: 2, 4: 1}, "get_freq_dict([1, 1, 1, 1, 2, 2, 2, 3, 3, 4])")

  def test7(self):
    D = get_freq_dict([0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 2, 7, 8, 8])
    self.assertEqual(D, {0: 3, 1: 4, 2: 4, 7: 1, 8: 2}, "get_freq_dict([0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 2, 7, 8, 8])")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-dict_find_mode_of_list-1-practice" label="exe-sec-HW7-1-103582-practice">
      <title>Calculate Mode of List (using a dictionary)</title>
      <statement>
        <p>The function <c>get_mode(L)</c> takes one parameter, <alert>L</alert>, a list of integers. <c>get_mode</c> builds a dictionary of frequencies to determine how often each number in the list occurs. Then it returns the <em>mode</em> of the list, that is, the number in L which occurs with the highest frequency.</p>
        <p>For example, <c>get_mode([3, 8, 5, 5, 8, 8])</c> would determine that</p>
        <p>
          <ul>
            <li>3 has frequency 1</li>
            <li>8 has frequency 3</li>
            <li>5 has frequency 2</li>
          </ul>
        </p>
        <p>Because  8 has the highest frequency, <alert>get_mode</alert> would return 8  for this example.</p>
        <p>Note: You may assume that L will not be empty and there will be a single mode in L (no ties for most frequent).</p>
        <p>Tip: Suppose D is a dictionary with integer values. The following code will determine the maximum value in D: <c>max_value = max(D.values())</c></p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="80%" />
          <col top="minor" width="20%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>get_mode([3, 8, 5, 5, 8, 8])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>8</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>get_mode([3, 8, 5, 5, 8, 8, 3, 3, 5, 3, 3])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>3</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    k = get_mode([3, 8, 5, 5, 8, 8])
    self.assertEqual(k, 8, "get_mode([3, 8, 5, 5, 8, 8])")

  def test2(self):
    k = get_mode([3, 8, 5, 5, 8, 8, 3, 3, 5, 3, 3])
    self.assertEqual(k, 3, "get_mode([3, 8, 5, 5, 8, 8, 3, 3, 5, 3, 3])")

  def test3(self):
    k = get_mode([-5, 10, -4, 10, -3])
    self.assertEqual(k, 10, "get_mode([-5, 10, -4, 10, -3])")

  def test4(self):
    k = get_mode([-5])
    self.assertEqual(k, -5, "get_mode([-5])")

  def test5(self):
    k = get_mode([4, 3, 4])
    self.assertEqual(k, 4, "get_mode([4, 3, 4])")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-Counting-by-k-1-practice" label="exe-sec-HW7-1-160712-practice">
      <title>Counting by k</title>
      <statement>
        <p>Write a 6-line Python script (not a function definition). The purpose of the program is to read a positive integer n from standard input and then show how to "count by k" for k = 0, 1, 2, ..., n.</p>
        <p>Hint: Use a nested for loop.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>3
</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>Counting by: 0
0 0 0 0 0 0 0
Counting by: 1
0 1 2 3 4 5 6
Counting by: 2
0 2 4 6 8 10 12
Counting by: 3
0 3 6 9 12 15 18</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
<tests>
<iotest>
  <input>3</input>
  <output>Counting by: 0
0 0 0 0 0 0 0
Counting by: 1
0 1 2 3 4 5 6
Counting by: 2
0 2 4 6 8 10 12
Counting by: 3
0 3 6 9 12 15 18
</output>
</iotest>
<iotest>
  <input>4</input>
  <output>Counting by: 0
0 0 0 0 0 0 0
Counting by: 1
0 1 2 3 4 5 6
Counting by: 2
0 2 4 6 8 10 12
Counting by: 3
0 3 6 9 12 15 18
Counting by: 4
0 4 8 12 16 20 24
</output>
</iotest>
<iotest>
  <input>5</input>
  <output>Counting by: 0
0 0 0 0 0 0 0
Counting by: 1
0 1 2 3 4 5 6
Counting by: 2
0 2 4 6 8 10 12
Counting by: 3
0 3 6 9 12 15 18
Counting by: 4
0 4 8 12 16 20 24
Counting by: 5
0 5 10 15 20 25 30
</output>
</iotest>
</tests>
      </program>
    </exercise>
  </exercises>
</section>
