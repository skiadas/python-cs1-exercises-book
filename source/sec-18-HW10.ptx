<section xml:id="sec-HW10-1">
  <title>HW10</title>
  <introduction>
    <p dir="ltr">Creating classes</p>
  </introduction>
  <exercises>
    <exercise xml:id="exer-defining_classes_intro-1" questionId="32302">
      <title>((Placeholder title))</title>
      <statement>
        <p>
          <h3>Defining Classes</h3>
        </p>
        <p>Previously, you have used built-in types in Python like <c>dict</c>, <c>str</c>, and <c>list</c>. Each of these types comes with its own methods, such as <c>keys</c>, <c>lower</c>, and <c>append</c>. </p>
        <p>Every object has a <alert>type </alert>that indicates which class the object belongs to. The purpose of the class is to specify the instance variables (aka data, attributes) and methods (aka functions) that each object belonging to the class will have. </p>
        <p>For example, in real life, every <alert>car </alert>has attributes such as make, model, and current odometer. And every reasonable car has available methods such as start engine, shift transmission, and honk horn.</p>
        <p>Our goal in this assignment is to learn how to <em>create new data types</em> by defining our own classes. </p>
      </statement>
    </exercise>
    <exercise xml:id="exer-pogil_1a_classname-1" questionId="32303">
      <title>((Placeholder title))</title>
      <statement>
        <p>What is the <alert>name </alert>of the class being defined here:</p>
        <p>
          <image decorative="yes" source="images/32303-image.png" width="90%" />
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exer-pogil_1b_methods-1" questionId="32304">
      <title>((Placeholder title))</title>
      <statement>
        <p>How many <alert>methods </alert>are in the class being defined here:</p>
        <p>
          <image decorative="yes" source="images/32304-image.png" width="90%" />
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exer-pogil_1c_self-1" questionId="32305">
      <title>((Placeholder title))</title>
      <statement>
        <p>What is the <alert>name of the first parameter</alert> in all the methods?</p>
        <p>
          <image decorative="yes" source="images/32305-Length.png" width="90%" />
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exer-pogil_2a_main_num_objects-1" questionId="32340">
      <title>((Placeholder title))</title>
      <statement>
        <p>In the <c>"__main__"</c> code block below, how many different <c>Sentence </c>objects are created by activating the class constructor?</p>
        <p>
          <image decorative="yes" source="images/32340-image%20%281%29.png" width="90%" />
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exer-pogil_2d_method_parameters-1" questionId="32308">
      <title>((Placeholder title))</title>
      <statement>
        <p><alert>How many parameters</alert> does the <c>convert_to</c> method have?</p>
        <p>
          <image decorative="yes" source="images/32308-convert_to.png" width="90%" />
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exer-pogil_2e_method_call_arguments-1" questionId="32309">
      <title>((Placeholder title))</title>
      <statement>
        <p>The <c>convert_to</c> method is called on lines 31 and 38. What is the <alert>number of arguments</alert> for a <c>convert_to</c> method call?</p>
        <p>
          <image decorative="yes" source="images/32309-length_main.png" width="90%" />
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exer-pogil_2f_arguments_vs_parameters-1" questionId="32326">
      <title>((Placeholder title))</title>
      <statement>
        <p>Based on your previous answers, how does the number of arguments for each method <em>call </em><alert>differ from</alert> the number of parameters specified in the method's <em>definition</em>?</p>
      </statement>
      <choices multiple-correct="no">
        <choice correct="yes">
          <statement>
            <p>There is one less argument.</p>
          </statement>
          <feedback>
            <p>Yes! We do not provide an argument for the "self" parameter.</p>
          </feedback>
        </choice>
        <choice correct="no">
          <statement>
            <p>There is no difference.</p>
          </statement>
          <feedback>
            <p>Review your answers to the previous two questions.</p>
          </feedback>
        </choice>
        <choice correct="no">
          <statement>
            <p>There is one less parameter.</p>
          </statement>
          <feedback>
            <p>Review your answers to the previous two questions.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise xml:id="exer-timer_class-multi1-1" questionId="32329">
      <title>Class Constructor</title>
      <statement>
        <p>Consider the following class definition.</p>
        <pre>  class Timer:
      """ A class that represents a timer. """
      def __init__(self):
          self.__hours = 0
          self.__minutes = 0
          self.__seconds = 0

      def print_with_labels(self):
          print('Hours:', self.__hours, end=' ')
          print('Minutes:', self.__minutes, end=' ')
          print('Seconds:', self.__seconds)

      def __str__(self):
          return str(self.__hours) + ':' + str(self.__minutes) + ':' + str(self.__seconds)        </pre>
        <p>Which of the methods in the function is the class <alert>constructor</alert>, responsible for initializing the instance variables (attributes) of the class?</p>
      </statement>
      <choices multiple-correct="no">
        <choice correct="yes">
          <statement>
            <p><c>__init__</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>__str__</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>print_with_labels</c></p>
          </statement>
          <feedback />
        </choice>
      </choices>
    </exercise>
    <exercise xml:id="exer-timer_class-multi2-1" questionId="32316">
      <title>Creating Objects</title>
      <statement>
        <p>Consider the following class definition.</p>
        <pre>  class Timer:
      """ A class that represents a timer. """
      def __init__(self):
          self.__hours = 0
          self.__minutes = 0
          self.__seconds = 0

      def print_with_labels(self):
          print('Hours:', self.__hours, end=' ')
          print('Minutes:', self.__minutes, end=' ')
          print('Seconds:', self.__seconds)

      def __str__(self):
          return str(self.__hours) + ':' + str(self.__minutes) + ':' + str(self.__seconds)        </pre>
        <p>Which of the following lines of code will create a new Timer object set to 0 seconds, 0 minutes, and 0 hours, and assign it to the variable <c>timer1</c>?</p>
      </statement>
      <choices multiple-correct="no">
        <choice correct="yes">
          <statement>
            <p><c>timer1 = Timer()</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>timer1 = Timer(0, 0, 0)</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>timer1.__init__(self)</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>timer1.Timer()</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>timer1.Timer(0, 0, 0)</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>timer1.__init__()</c></p>
          </statement>
          <feedback />
        </choice>
      </choices>
    </exercise>
    <exercise xml:id="exer-timer_class-multi4-1" questionId="32319">
      <title>Calling Methods 1</title>
      <statement>
        <p>Consider the following class definition.</p>
        <pre>  class Timer:
      """ A class that represents a timer. """
      def __init__(self):
          self.hours = 0
          self.minutes = 0
          self.seconds = 0

      def print_with_labels(self):
          print('Hours:', self.hours, end=' ')
          print('Minutes:', self.minutes, end=' ')
          print('Seconds:', self.seconds)

      def __str__(self):
          return str(self.hours) + ':' + str(self.minutes) + ':' + str(self.seconds)        </pre>
        <p><alert>Recall:</alert>  The <c>__str__ </c>method returns the string representation of the object. This method is activated (automatically!) whenever <c>print()</c> or <alert><em><c>str</c></em><c>()</c></alert> is invoked on an object. (Like all the other methods whose names are surrounded by double underscores (<c>__</c>), we never call <c>__str__</c> directly.  It is there, waiting to "answer the call" when we ask to <c>print</c> an object or use <c>str() </c>to convert an object to a string.)</p>
        <p><alert>Question: </alert> What output will be produced when the following lines of code are executed?</p>
        <pre>    t2 = Timer()
    t2.minutes = 7
    t2.seconds = 15
    print(t2)
        </pre>
      </statement>
      <choices multiple-correct="no">
        <choice correct="yes">
          <statement>
            <p><c>0:7:15</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>0 7 15</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>Hours: 0 Minutes: 7 Seconds: 15</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><alert><c>Hours: 15 </c><c>Minutes: 7 Seconds: 0</c></alert></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>15:7:0</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>15  7  0</c></p>
          </statement>
          <feedback />
        </choice>
      </choices>
    </exercise>
    <exercise xml:id="exer-timer_class-multi3-1" questionId="104213">
      <title>Setting Attributes</title>
      <statement>
        <p>Consider the following class definition.</p>
        <pre>  class Timer:
      """ A class that represents a timer. """
      def __init__(self):
          self.__hours = 0
          self.__minutes = 0
          self.__seconds = 0
      
      def set_hours(self, h):
          self.__hours = h
          
      def set_minutes(self, m):
          self.__minutes = m
          
      def set_seconds(self, s):
          self.__seconds = s

      def print_with_labels(self):
          print('Hours:', self.__hours, end=' ')
          print('Minutes:', self.__minutes, end=' ')
          print('Seconds:', self.__seconds)

      def __str__(self):
          return str(self.__hours) + ':' + str(self.__minutes) + ':' + str(self.__seconds)        </pre>
        <p>What output will be produced when the following lines of code are executed?</p>
        <pre>      t1 = Timer()
      t1.set_hours(7)
      print(t1)
        </pre>
      </statement>
      <choices multiple-correct="no">
        <choice correct="yes">
          <statement>
            <p><c>7:0:0</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>7  0 0</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>0:0:7</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement><c>0 0 7</c></statement>
          <feedback />
        </choice>
      </choices>
    </exercise>
    <exercise xml:id="exer-timer_class-multi5-1" questionId="32320">
      <title>Calling Methods 2</title>
      <statement>
        <p>Consider the following class definition.</p>
        <pre>  class Timer:
      """ A class that represents a timer. """
      def __init__(self):
          self.__hours = 0
          self.__minutes = 0
          self.__seconds = 0
      
      def set_hours(self, h):
          self.__hours = h
          
      def set_minutes(self, m):
          self.__minutes = m
          
      def set_seconds(self, s):
          self.__seconds = s

      def print_with_labels(self):
          print('Hours:', self.__hours, end=' ')
          print('Minutes:', self.__minutes, end=' ')
          print('Seconds:', self.__seconds)

      def __str__(self):
          return str(self.__hours) + ':' + str(self.__minutes) + ':' + str(self.__seconds)        </pre>
        <p>What output will be produced when the following lines of code are executed?</p>
        <pre>    t2 = Timer()
    t2.set_hours(14)
    t2.set_minutes(55)
    t2.set_minutes(27)
    t2.print_with_labels()
        </pre>
      </statement>
      <choices multiple-correct="no">
        <choice correct="no">
          <statement>
            <p><c>14:27:0</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>14:55:27</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="yes">
          <statement>
            <p><c>Hours: 14 Minutes: 27 Seconds: 0</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>Hours: 14 Minutes: 55 Seconds: 27</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>Hours: 15 Minutes: 22 Seconds: 0</c></p>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <p><c>15:22:0</c></p>
          </statement>
          <feedback />
        </choice>
      </choices>
    </exercise>
    <exercise xml:id="exer-timer_class-multi6-1" questionId="32342">
      <title>Writing Methods</title>
      <statement>
        <p>Consider the following class definition.</p>
        <pre>  class Timer:
      """ A class that represents a timer. """
      def __init__(self):
          self.__hours = 0
          self.__minutes = 0
          self.__seconds = 0

      def print_with_labels(self):
          print('Hours:', self.__hours, end=' ')
          print('Minutes:', self.__minutes, end=' ')
          print('Seconds:', self.__seconds)

      def __str__(self):
          return str(self.__hours) + ':' + str(self.__minutes) + ':' + str(self.__seconds)        </pre>
        <p>Which of the following is the correct definition for a new <c>Timer</c> class method called <c>set</c> that will take three integer values representing hours, minutes, and seconds. and set the object's instance variables (attributes) appropriately?</p>
      </statement>
      <choices multiple-correct="no">
        <choice correct="yes">
          <statement>
            <pre>def set(self, h, m, s):
    self.__hours = h
    self.__minutes = m
    self.__seconds = s            </pre>
          </statement>
          <feedback />
        </choice>
        <choice correct="no">
          <statement>
            <pre>def set(h, m, s):
    self.__hours = h
    self.__minutes = m
    self.__seconds = s            </pre>
          </statement>
          <feedback>
            <p>Remember, when writing a method for a class, you always need to include <c>self</c> as the first parameter.</p>
          </feedback>
        </choice>
        <choice correct="no">
          <statement>
            <pre>def set(self):
    self.__hours = h
    self.__minutes = m
    self.__seconds = s            </pre>
          </statement>
          <feedback>
            <p>To be able give new values to the object's <c>hours</c> and <c>minutes</c>, you give the method parameters to hold those values.</p>
          </feedback>
        </choice>
        <choice correct="no">
          <statement>
            <pre>def set(self, h, m, s):
    __hours = h
    __minutes = m
    __seconds = s            </pre>
          </statement>
          <feedback>
            <p>You need to assign the new values to the object's attributes.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise xml:id="exer-timer_class-call_set_short-1" questionId="32321">
      <title>Calling the Set Method</title>
      <statement>
        <p>Consider the following class definition.</p>
        <pre>  class Timer:
      """ A class that represents a timer. """
      def __init__(self):
          self.__hours = 0
          self.__minutes = 0
          self.__seconds = 0

      def print_with_labels(self):
          print('Hours:', self.__hours, end=' ')
          print('Minutes:', self.__minutes, end=' ')
          print('Seconds:', self.__seconds)

      def __str__(self):
          return str(self.__hours) + ':' + str(self.__minutes) + ':' + str(self.__seconds)        </pre>
        <p>Suppose <c>t1</c> is a newly created instance of the the <c>Timer</c> class (i.e., a <c>Timer</c> object). Give the line of code that will call the <c>set</c> method, as described in the previous question, to set <c>t1</c> to 5 hours, 17 minutes, 51 seconds.</p>
      </statement>
    </exercise>
    <exercise xml:id="exer-timer_class-convert_to_seconds_method-1" questionId="161517">
      <title>Convert to Seconds</title>
      <statement>
        <p> Implement a method for the Timer class, convert_to_seconds. For a given Timer, the method returns the equivalent number of seconds. For example, if Timer <c>t1</c> is currently 0:1:15 (0 hours, 1 minute, 15 seconds), then the call <c>t1.convert_to_seconds()</c> will return 75.</p>
        <p>Hint: Remember that inside the body of the convert_to_seconds method definition, we use the parameter <c>self </c>to refer to the <c>Timer </c>object which activated the method.</p>
        <p>The <c>Timer</c> class is given below for reference.</p>
        <pre>    class Timer:
        """ A class that represents a timer. """
        def __init__(self, h, m, s):
            self.__hours = h
            self.__minutes = m
            self.__seconds = s

        def print_with_labels(self):
            print('Hours:', self.__hours, end=' ')
            print('Minutes:', self.__minutes, end=' ')
            print('Seconds:', self.__seconds)

        def __str__(self):
            print(self.__hours + ':' + self.__minutes + ':' self.__seconds)        </pre>
      </statement>
      <program interactive="activecode" language="python">
        <input>_my_out = ""
_my_in = []

def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise EOFError()
  return _my_in.pop()





^^^^
# NOTE: Do not change the indentation! It is required because the
# code will be pasted into the Timer class definition body.
    def convert_to_seconds(self):
        </input>
        <tests>



from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(0, 5, 30)
    ans = timer1.convert_to_seconds()
    print(ans)
    
    self.assertEqual('330\n', getMyStdOut())


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(0, 5, 30)
    ans = timer1.convert_to_seconds()
    print(ans)
    
    self.assertEqual('330\n', getMyStdOut())


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(0, 55, 30)
    ans = timer1.convert_to_seconds()
    print(ans)
    
    self.assertEqual('3330\n', getMyStdOut())


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(14, 40, 30)
    ans = timer1.convert_to_seconds()
    print(ans)
    
    self.assertEqual('52830\n', getMyStdOut())


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(1, 2, 3)
    ans = timer1.convert_to_seconds()
    print(ans)
    
    self.assertEqual('3723\n', getMyStdOut())


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(10, 45, 59)
    ans = timer1.convert_to_seconds()
    print(ans)
    
    self.assertEqual('38759\n', getMyStdOut())


  def test7(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(100, 35, 58)
    ans = timer1.convert_to_seconds()
    print(ans)
    
    self.assertEqual('362158\n', getMyStdOut())



myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-timer_class-add_timers-1" questionId="32341">
      <title>Add Two Timers</title>
      <statement>
        <p> Write a function, add_timers, that takes two <c>Timer</c> objects, <c>t1</c> and <c>t2</c>, and returns a new <c>Timer</c> object that is the sum of <c>t1</c> and <c>t2</c>. Neither of the original <c>Timer</c> objects should be changed.</p>
        <p>The minutes and seconds attributes for the new <c>Timer</c> object must be valid (i.e., in the range 0 through 59). This means you may need to do some conversion from seconds to minutes and from minutes to hours. You may assume that the attributes for the provided <c>Timer</c> objects <c>t1</c> and <c>t2</c> are valid.</p>
        <p>Note that the function you are writing is <alert>NOT</alert> a <c>Timer</c> class method. It is just a regular function.</p>
        <p><alert>HINT</alert>: Use floor division (//) and remainder (%) to implement this function.</p>
        <p>The <c>Timer</c> class is given below for reference.</p>
        <pre>class Timer:
        """ A class that represents a timer. """
        def __init__(self, h, m, s):
            self.__hours = h
            self.__minutes = m
            self.__seconds = s

        def print_with_labels(self):
            print('Hours:', self.__hours, end=' ')
            print('Minutes:', self.__minutes, end=' ')
            print('Seconds:', self.__seconds)
            
        def get_seconds(self):
            return self.__seconds
        
        def get_minutes(self):
            return self.__minutes
        
        def get_hours(self):
            return self.__hours

        def __str__(self):
            print(self.__hours + ':' + self.__minutes + ':' self.__seconds)        </pre>
      </statement>
      <program interactive="activecode" language="python">
        <input>_my_out = ""
_my_in = []

def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise EOFError()
  return _my_in.pop()





^^^^
def add_timers(t1, t2):
        </input>
        <tests>



from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(0, 5, 30)
    timer2 = Timer(2, 19, 0)
    timer3 = add_timers(timer1, timer2)
    print(timer3)
    if(str(timer3) != "2:24:30"):  print("Should be: 2:24:30")
    
    self.assertEqual('2:24:30\n', getMyStdOut())


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(0, 5, 30)
    timer2 = Timer(2, 19, 35)
    timer3 = add_timers(timer1, timer2)
    print(timer3)
    if(str(timer3) != "2:25:5"):  print("Should be: 2:25:5")
    
    self.assertEqual('2:25:5\n', getMyStdOut())


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(0, 55, 30)
    timer2 = Timer(2, 10, 0)
    timer3 = add_timers(timer1, timer2)
    print(timer3)
    if(str(timer3) != "3:5:30"):  print("Should be: 3:5:30")
    
    self.assertEqual('3:5:30\n', getMyStdOut())


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(14, 40, 30)
    timer2 = Timer(6, 10, 45)
    timer3 = add_timers(timer1, timer2)
    print(timer3)
    if(str(timer3) != "20:51:15"):  print("Should be: 20:51:15")
    
    self.assertEqual('20:51:15\n', getMyStdOut())


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(1, 51, 41)
    timer2 = Timer(4, 48, 59)
    timer3 = add_timers(timer1, timer2)
    print(timer3)
    if(str(timer3) != "6:40:40"):  print("Should be: 6:40:40")
    
    self.assertEqual('6:40:40', getMyStdOut())


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(10, 45, 59)
    timer2 = Timer(30, 54, 50)
    timer3 = add_timers(timer1, timer2)
    print(timer3)
    if(str(timer3) != "41:40:49"):  print("Should be: 41:40:49")
    
    self.assertEqual('41:40:49', getMyStdOut())


  def test7(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(100, 35, 58)
    timer2 = Timer(130, 59, 37)
    timer3 = add_timers(timer1, timer2)
    print(timer3)
    if(str(timer3) != "231:35:35"):  print("Should be: 231:35:35")
    
    self.assertEqual('231:35:35\n', getMyStdOut())


  def test8(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(200, 36, 59)
    timer2 = Timer(330, 58, 59)
    timer3 = add_timers(timer1, timer2)
    print(timer3)
    
    self.assertEqual('531:35:58\n', getMyStdOut())



myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-implement_comp_oper_info-1" questionId="32322">
      <title>((Placeholder title))</title>
      <statement>
        <p>
          <h3>Implementing the Comparison Operators</h3>
        </p>
        <p />
        <p>Python has "magic" methods to make the comparison operators work with objects. The six comparison operators (&lt;, &lt;=, &gt;, &gt;=, == and !=) are enabled simply by implementing the following special methods: <c>__lt__, __le__, __gt__, __ge__, __eq__ and __ne__</c></p>
        <p>See:  <em><url href="https://www.tutorialspoint.com/How-to-overload-Python-comparison-operators">https://www.tutorialspoint.com/How-to-overload-Python-comparison-operators</url></em></p>
        <p>For example, here is the code to implement <c>__lt__</c> (the &lt; or "less than" operator) for the <c>Timer </c>class. Notice we start by converting both Timers to an integer number of seconds, then simply compare those numbers of seconds. Comparing two Timers reduces to the problem of comparing two integers.</p>
        <pre>
    def __lt__(self, other):
        sec_self = self.convert_to_seconds()
        sec_other = other.convert_to_seconds()
        return sec_self &lt; sec_other
        </pre>
      </statement>
    </exercise>
    <exercise xml:id="exer-timer_class-equivalence_operator_overload-1" questionId="32324">
      <title>Equivalence and Inequivalence Operators: ==, !=</title>
      <statement>
        <p>Two Timer objects are <alert>equivalent </alert>exactly when they represent the same amount of time. Implement the  <c>__eq__</c> and <c>__ne__</c> methods (i.e., == and != operators) for the <c>Timer </c>class. </p>
        <p><alert>Hint</alert>: Assume the <c>convert_to_seconds</c> method has already been implemented.</p>
        <p />
      </statement>
      <program interactive="activecode" language="python">
        <input>_my_out = ""
_my_in = []

def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise EOFError()
  return _my_in.pop()





^^^^
# NOTE: Do not change the indentation! It is required because the
# code will be pasted into the Timer class definition body.
    def __eq__(self, other):
        
        
    def __ne__(self, other):
        </input>
        <tests>



from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(0, 5, 30)
    timer2 = Timer(0, 5, 30)
    ans1 = timer1 == timer2
    ans2 = timer1 != timer2
    print(ans1, ans2)
    
    self.assertEqual('True False\n', getMyStdOut())


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(1, 5, 30)
    timer2 = Timer(0, 5, 30)
    ans = timer1 == timer2
    ans2 = timer1 != timer2
    print(ans, ans2)
    
    self.assertEqual('False True\n', getMyStdOut())


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(1, 5, 30)
    timer2 = Timer(1, 4, 30)
    ans = timer1 == timer2
    ans2 = timer1 != timer2
    print(ans, ans2)
    
    self.assertEqual('False True\n', getMyStdOut())


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(1, 5, 30)
    timer2 = Timer(0, 5, 32)
    ans = timer1 == timer2
    ans2 = timer1 != timer2
    print(ans, ans2)
    
    self.assertEqual('False True\n', getMyStdOut())


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(10, 50, 40)
    timer2 = Timer(10, 50, 40)
    ans = timer1 == timer2
    ans2 = timer1 != timer2
    print(ans, ans2)
    
    self.assertEqual('True False\n', getMyStdOut())


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(10, 50, 40)
    timer2 = Timer(10, 50, 41)
    ans = timer1 == timer2
    ans2 = timer1 != timer2
    print(ans, ans2)
    
    self.assertEqual('False True\n', getMyStdOut())


  def test7(self):
    resetMyStdOut()
    setMyStdIn('')
    
    timer1 = Timer(10, 50, 40)
    timer2 = Timer(11, 50, 40)
    ans = timer1 == timer2
    ans2 = timer1 != timer2
    print(ans, ans2)
    
    self.assertEqual('False True\n', getMyStdOut())



myTests().main()        </tests>
      </program>
    </exercise>
  </exercises>
</section>