<section xml:id="sec-HW8-1-practice">
  <title>HW8 Practice</title>
  <introduction>
    <p dir="ltr">- while loops</p>
    <p dir="ltr">- sets</p>
  </introduction>
  <exercises>
    <exercise xml:id="exer-build_num_list1-1-practice" label="exe-sec-HW8-1-32073-practice">
      <title>Build Num List</title>
      <statement>
        <p>Write a function, <c>build_num_list</c>, that has no parameters; the function reads <alert>integers</alert>from standard input, one at a time, stopping when a <c>0</c> is read.</p>
        <p>Each number read, except the final <c>0</c>, is appended to a new list (initially empty) created by the function. The function should <alert>return</alert> the accumulated list.</p>
        <p><alert>Hint:</alert>Use a while loop.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="20%" />
          <col top="minor" width="40%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>build_num_list()</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>55
20
20
0</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[55, 20, 20]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>build_num_list()</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0
1
1</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    sys.stdin = StringIO.StringIO('0\n1\n1')
    res = build_num_list()
    self.assertEqual(res, [], "&lt;pre&gt;0\n1\n1&lt;/pre&gt;")

  def test2(self):
    sys.stdin = StringIO.StringIO('99\n-15\n11\n0\n5\n1\n1')
    res = build_num_list()
    self.assertEqual(res, [99, -15, 11], "&lt;pre&gt;99\n-15\n11\n0\n5\n1\n1&lt;/pre&gt;")

  def test3(self):
    sys.stdin = StringIO.StringIO('100\n2\n1\n-1\n-2\n0\n-2\n-1')
    res = build_num_list()
    self.assertEqual(res, [100, 2, 1, -1, -2], "&lt;pre&gt;100\n2\n1\n-1\n-2\n0\n-2\n-1&lt;/pre&gt;")

  def test4(self):
    sys.stdin = StringIO.StringIO('10\n0\n20\n30\n40\n50')
    res = build_num_list()
    self.assertEqual(res, [10], "&lt;pre&gt;10\n0\n20\n30\n40\n50&lt;/pre&gt;")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-get_pos_input-1-practice" label="exe-sec-HW8-1-32046-practice">
      <title>Get Positive Input</title>
      <statement>
        <p>The function <c>get_pos_input</c> takes no parameters. Instead, it reads integers one at a time from standard input until a <alert>positive</alert> integer is read. Once a positive integer has been read, that integer is <alert>returned</alert>.</p>
        <p>Add Python code to implement the <c>get_pos_input</c> function.</p>
        <p><alert>Hint</alert>: Use a while loop.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="40%" />
          <col top="minor" width="20%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>get_pos_input()</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-3
-352034
-42342
-42455222
17
25
3
-2
</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>17</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>get_pos_input()</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0
12</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>12</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    sys.stdin = StringIO.StringIO('-3\n-352034\n-42342\n-42455222\n17\n25\n3\n-2')
    res = get_pos_input()
    self.assertEqual(res, 17, "&lt;pre&gt;-3\n-352034\n-42342\n-42455222\n17\n25\n3\n-2&lt;/pre&gt;")

  def test2(self):
    sys.stdin = StringIO.StringIO('0\n12')
    res = get_pos_input()
    self.assertEqual(res, 12, "&lt;pre&gt;0\n12&lt;/pre&gt;")

  def test3(self):
    sys.stdin = StringIO.StringIO('1492\n2')
    res = get_pos_input()
    self.assertEqual(res, 1492, "&lt;pre&gt;1492\n2&lt;/pre&gt;")

  def test4(self):
    sys.stdin = StringIO.StringIO('-1\n-2\n-3\n-4\n0\n99\n2')
    res = get_pos_input()
    self.assertEqual(res, 99, "&lt;pre&gt;-1\n-2\n-3\n-4\n0\n99\n2&lt;/pre&gt;")

  def test5(self):
    sys.stdin = StringIO.StringIO('-10\n-15\n-3\n-999\n-12\n-100\n98765')
    res = get_pos_input()
    self.assertEqual(res, 98765, "&lt;pre&gt;-10\n-15\n-3\n-999\n-12\n-100\n98765&lt;/pre&gt;")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-sum_nonneg_input-1-practice" label="exe-sec-HW8-1-32050-practice">
      <title>Sum Nonnegative Input</title>
      <statement>
        <p>The function <c>sum_nonneg_input</c> takes no parameters. Instead, it reads <alert>integers</alert>one at a time from standard input, maintaining a running sum of numbers entered, until a negative integer is read. Once a negative integer is read, the function returns the current sum. Note: the negative number is not included in the sum.</p>
        <p>Write Python code to implement the <c>sum_nonneg_input</c> function.</p>
        <p><alert>Hint</alert>: Use a while loop.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="40%" />
          <col top="minor" width="20%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>sum_nonneg_input()</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>3
35
42
-17
25
3
-2
</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>80</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    sys.stdin = StringIO.StringIO('3\n35\n42\n-17\n25\n3\n-2')
    res = sum_nonneg_input()
    self.assertEqual(res, 80, "&lt;pre&gt;3\n35\n42\n-17\n25\n3\n-2&lt;/pre&gt;")

  def test2(self):
    sys.stdin = StringIO.StringIO('-8\n2')
    res = sum_nonneg_input()
    self.assertEqual(res, 0, "&lt;pre&gt;-8\n2&lt;/pre&gt;")

  def test3(self):
    sys.stdin = StringIO.StringIO('1492\n0\n100\n-1')
    res = sum_nonneg_input()
    self.assertEqual(res, 1592, "&lt;pre&gt;1492\n0\n100\n-1&lt;/pre&gt;")

  def test4(self):
    sys.stdin = StringIO.StringIO('1\n2\n3\n4\n-99')
    res = sum_nonneg_input()
    self.assertEqual(res, 10, "&lt;pre&gt;1\n2\n3\n4\n-99&lt;/pre&gt;")

  def test5(self):
    sys.stdin = StringIO.StringIO('1\n4\n9\n16\n25\n36\n49\n64\n-81')
    res = sum_nonneg_input()
    self.assertEqual(res, 204, "&lt;pre&gt;1\n4\n9\n16\n25\n36\n49\n64\n-81&lt;/pre&gt;")

myTests().main()
</tests>

      </program>
    </exercise>
    <exercise xml:id="exer-max_float_input_with_sentinel-1-practice" label="exe-sec-HW8-1-32049-practice">
      <title>Max Float Input</title>
      <statement>
        <p>
          The function <c>max_float_input</c> takes no parameters. Instead, it reads strings from standard input, one at a time, until the string "<alert>stop</alert>" is read.
          <ul>
            <li>If the string is not "<alert>stop</alert>", the string is converted to a floating point value (type <c>float</c>) and compared to the largest previous float value entered (if any).</li>
            <li>Otherwise, the function stops and returns the <alert>largest floating point value</alert> that was entered so far.</li>
          </ul>
        </p>
        <p><alert>Note</alert>: If the <alert>first</alert>string entered is "<alert>stop</alert>", the function simply returns the Python object <c>None</c>.</p>
        <p>Add Python code to implement the <c>max_float_input</c> function.</p>
        <p><alert>Hint</alert>: Use a while loop.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="30%" />
          <col top="minor" width="30%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>max_float_input()</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>2938.3
294184.2
2982.003
3
-23482498.5
stop
</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>294184.2</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>max_float_input()</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>stop</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>None</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    sys.stdin = StringIO.StringIO('2938.3\n294184.2\n2982.003\n3\n-23482498.5\nstop')
    res = max_float_input()
    self.assertEqual(res, 294184.2, "&lt;pre&gt;2938.3\n294184.2\n2982.003\n3\n-23482498.5\nstop&lt;/pre&gt;")

  def test2(self):
    sys.stdin = StringIO.StringIO('stop')
    res = max_float_input()
    self.assertEqual(res, None, "&lt;pre&gt;stop&lt;/pre&gt;")

  def test3(self):
    sys.stdin = StringIO.StringIO('52.0\n41.2\n73.7\n53.9\n-34.6\nstop')
    res = max_float_input()
    self.assertEqual(res, 73.7, "&lt;pre&gt;52.0\n41.2\n73.7\n53.9\n-34.6\nstop&lt;/pre&gt;")

  def test4(self):
    sys.stdin = StringIO.StringIO('152.0\n41.2\n73.7\n53.9\n-34.6\nstop')
    res = max_float_input()
    self.assertEqual(res, 152.0, "&lt;pre&gt;152.0\n41.2\n73.7\n53.9\n-34.6\nstop&lt;/pre&gt;")

  def test5(self):
    sys.stdin = StringIO.StringIO('10.0\n-6.0\n6.0\n19.1\nstop')
    res = max_float_input()
    self.assertEqual(res, 19.1, "&lt;pre&gt;10.0\n-6.0\n6.0\n19.1\nstop&lt;/pre&gt;")

  def test6(self):
    sys.stdin = StringIO.StringIO('-5.6\n-2.6\n-9.9\n-8.7\nstop')
    res = max_float_input()
    self.assertEqual(res, -2.6, "&lt;pre&gt;-5.6\n-2.6\n-9.9\n-8.7\nstop&lt;/pre&gt;")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-multiplication_quiz_while-1-practice" label="exe-sec-HW8-1-32047-practice">
      <title>Multiplication Quiz</title>
      <statement>
        <p>The function <c>multiplication_quiz(a, b)</c> takes two integer parameters, <c>a</c> and <c>b</c>. The function prompts the user (just once) to enter the product of a times b, and uses a loop to keep checking the input for the correct answer.</p>
        <p>The function keeps a count of how many attempts were needed to get the right answer. When the correct answer is read, the function returns the count.</p>
        <p>Write the code needed to implement this function.</p>
        <p><alert>Hint</alert>: Use a while loop.</p>
        <p><alert>Note</alert>: You should assume that every input can be converted to an integer.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="20%" />
          <col top="minor" width="40%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>multiplication_quiz(12, 7)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>17
9
84
83
99</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>Printout: What is 12 times 7?
Returns: 3</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>multiplication_quiz(2, 3)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>10
9
8
7
6
5
4</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>Printout: What is 2 times 3?
Returns: 5</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    sys.stdin = StringIO.StringIO('17\n9\n84\n83\n99')
    sys.stdout = StringIO.StringIO()
    count = multiplication_quiz(12, 7)
    printout = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    sys.stdin = sys.__stdin__
    self.assertEqual(printout, 'What is 12 times 7?\n', "multiplication_quiz(12, 7)")
    self.assertEqual(count, 3, "&lt;pre&gt;17\n9\n84\n83\n99&lt;/pre&gt;")

  def test2(self):
    sys.stdin = StringIO.StringIO('55\n44\n2')
    sys.stdout = StringIO.StringIO()
    count = multiplication_quiz(5, 11)
    printout = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    sys.stdin = sys.__stdin__
    self.assertEqual(printout, 'What is 5 times 11?\n', "multiplication_quiz(5, 11)")
    self.assertEqual(count, 1, "&lt;pre&gt;55\n44\n2&lt;/pre&gt;")

  def test3(self):
    sys.stdin = StringIO.StringIO('10\n9\n8\n7\n6\n5\n4')
    sys.stdout = StringIO.StringIO()
    count = multiplication_quiz(2, 3)
    printout = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    sys.stdin = sys.__stdin__
    self.assertEqual(printout, 'What is 2 times 3?\n', "multiplication_quiz(2, 3)")
    self.assertEqual(count, 5, "&lt;pre&gt;10\n9\n8\n7\n6\n5\n4&lt;/pre&gt;")

  def test4(self):
    sys.stdin = StringIO.StringIO('60\n65\n70\n75')
    sys.stdout = StringIO.StringIO()
    count = multiplication_quiz(13, 5)
    printout = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    sys.stdin = sys.__stdin__
    self.assertEqual(printout, 'What is 13 times 5?\n', "multiplication_quiz(13, 5)")
    self.assertEqual(count, 2, "&lt;pre&gt;60\n65\n70\n75&lt;/pre&gt;")

  def test5(self):
    sys.stdin = StringIO.StringIO('33\n11\n12\n13\n44\n144\n155')
    sys.stdout = StringIO.StringIO()
    count = multiplication_quiz(12, 12)
    printout = sys.stdout.getvalue()
    sys.stdout = sys.__stdout__
    sys.stdin = sys.__stdin__
    self.assertEqual(printout, 'What is 12 times 12?\n', "multiplication_quiz(12, 12)")
    self.assertEqual(count, 6, "&lt;pre&gt;33\n11\n12\n13\n44\n144\n155&lt;/pre&gt;")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-list_has_repeat_using_set-1-practice" label="exe-sec-HW8-1-32048-practice">
      <title>List Has Repeat (using set)</title>
      <statement>
        <p>Write a definition for the function <c>has_repeat(L)</c>. The parameter L is a list of immutable items. The function returns True if L has at least one repeated item, otherwise it returns False.</p>
        <p><alert>Hint</alert>: If the set of items in L has a shorter length than L itself, return True; otherwise, return False.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>has_repeat(list('hello'))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>True</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>has_repeat(list('Maybe'))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>False</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    b = has_repeat(['h', 'e', 'l', 'l', 'o'])
    self.assertEqual(b, True, "has_repeat(['h', 'e', 'l', 'l', 'o'])")

  def test2(self):
    b = has_repeat(['M', 'a', 'y', 'b', 'e'])
    self.assertEqual(b, False, "has_repeat(['M', 'a', 'y', 'b', 'e'])")

  def test3(self):
    b = has_repeat(['b', 'a', 'n', 'a', 'n', 'a'])
    self.assertEqual(b, True, "has_repeat(['b', 'a', 'n', 'a', 'n', 'a'])")

  def test4(self):
    b = has_repeat([])
    self.assertEqual(b, False, "has_repeat([])")

  def test5(self):
    b = has_repeat(['banana'])
    self.assertEqual(b, False, "has_repeat(['banana'])")

  def test6(self):
    b = has_repeat(['cat', 'dog', 'cat'])
    self.assertEqual(b, True, "has_repeat(['cat', 'dog', 'cat'])")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-number_of_distinct_elements-1-practice" label="exe-sec-HW8-1-32051-practice">
      <title>Number of Distinct Elements (using set)</title>
      <statement>
        <p>Implement the function <c>num_distinct_elements(C)</c>. The function takes the parameter C, a collection of type list, string, or tuple, and returns the number of distinct items in C. For example, if C is the list [1, 2, 3, 3, 2, 1, 2, 3, 3, 10], the return value would be 4 (since 1, 2, 3, 10 are the "distinct" elements).</p>
        <p>HINT: The body of the function requires just one or two lines of code.</p>
        <p><alert>NOTE</alert>: Use <c>set</c> in your code.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="80%" />
          <col top="minor" width="20%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>C = [1, 2, 3, 2, 2, 2, 1, 1, 1, 1]
num_distinct_elements(C)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>3</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>C = "She sells sea shells by the sea shore."
num_distinct_elements(C)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>13</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>C = ('b', 'a', 'b', 'b', 'l', 'e')
num_distinct_elements(C)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>4</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    n = num_distinct_elements([1, 2, 3, 2, 2, 2, 1, 1, 1, 1])
    self.assertEqual(n, 3, "num_distinct_elements([1, 2, 3, 2, 2, 2, 1, 1, 1, 1])")

  def test2(self):
    n = num_distinct_elements(She sells sea shells by the sea shore.)
    self.assertEqual(n, 13, "num_distinct_elements(She sells sea shells by the sea shore.)")

  def test3(self):
    n = num_distinct_elements(('b', 'a', 'b', 'b', 'l', 'e'))
    self.assertEqual(n, 4, "num_distinct_elements(('b', 'a', 'b', 'b', 'l', 'e'))")

  def test4(self):
    n = num_distinct_elements([2, 3, 5, 7, 11, 13, 15])
    self.assertEqual(n, 7, "num_distinct_elements([2, 3, 5, 7, 11, 13, 15])")

  def test5(self):
    n = num_distinct_elements([])
    self.assertEqual(n, 0, "num_distinct_elements([])")

  def test6(self):
    n = num_distinct_elements(aaaaaaaaaaaaaaaa)
    self.assertEqual(n, 1, "num_distinct_elements(aaaaaaaaaaaaaaaa)")

  def test7(self):
    n = num_distinct_elements(['m', 'i', 's', 's', 'i', 's', 's', 'i', 's', 's', 'i', 'p', 'p', 'i', ' ', 'r', 'i', 'v', 'e', 'r'])
    self.assertEqual(n, 8, "num_distinct_elements(['m', 'i', 's', 's', 'i', 's', 's', 'i', 's', 's', 'i', 'p', 'p', 'i', ' ', 'r', 'i', 'v', 'e', 'r'])")

  def test8(self):
    n = num_distinct_elements(Hanover College Panthers!)
    self.assertEqual(n, 16, "num_distinct_elements(Hanover College Panthers!)")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-distinct_elements_in_nested_collection-1-practice" label="exe-sec-HW8-1-32391-practice">
      <title>Get Distinct From Nested</title>
      <statement>
        <p>Write a definition for the function <c>get_distinct_from_nested(C)</c>, where the parameter C is a sequence of sequences (e.g.,  a list of strings or a list of lists of integers). The job of the function is to use set operations to find and return the <alert>sorted</alert>list of unique elements in the nested collection C.</p>
        <p><alert>Hint</alert>: If S is a set, <c>sorted(S)</c> is a sorted list of the elements in S.</p>
        <p><alert>Another Hint</alert>: Use set union to accumulate the set S of distinct inner elements using a single for loop:</p>
        <p>
          <ul>
            <li>iterate <c>seq</c>over the top-level elements of C</li>
            <li>use <c>S = S.union(seq)</c> to update S with additional items from <c>seq</c></li>
          </ul>
          This only requires about 5 lines of code.
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="60%" />
          <col top="minor" width="40%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>C = ['Java', 'Jumble', 'BlackJack']
get_distinct_from_nested(C)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['B', 'J', 'a', 'b', 'c', 'e',
 'k', 'l', 'm', 'u', 'v']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>C = ['app', 'ban', 'can', 'def']
get_distinct_from_nested(C)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['a', 'b', 'c', 'd', 'e',
 'f', 'n', 'p']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>C = ['!', '!!', '!!!', '!!!!', '!!!!!']
get_distinct_from_nested(C)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['!']</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    res = get_distinct_from_nested(['Java', 'Jumble', 'BlackJack'])
    self.assertEqual(res, ['B', 'J', 'a', 'b', 'c', 'e', 'k', 'l', 'm', 'u', 'v'], "get_distinct_from_nested(['Java', 'Jumble', 'BlackJack'])")

  def test2(self):
    res = get_distinct_from_nested(['app', 'ban', 'can', 'def'])
    self.assertEqual(res, ['a', 'b', 'c', 'd', 'e', 'f', 'n', 'p'], "get_distinct_from_nested(['app', 'ban', 'can', 'def'])")

  def test3(self):
    res = get_distinct_from_nested(['!', '!!', '!!!', '!!!!', '!!!!!'])
    self.assertEqual(res, ['!'], "get_distinct_from_nested(['!', '!!', '!!!', '!!!!', '!!!!!'])")

  def test4(self):
    res = get_distinct_from_nested([''])
    self.assertEqual(res, [], "get_distinct_from_nested([''])")

  def test5(self):
    res = get_distinct_from_nested([['z', 'i', 'g'], ['z', 'a', 'g'], ['b', 'a', 'g', 'p', 'i', 'p', 'e', 's']])
    self.assertEqual(res, ['a', 'b', 'e', 'g', 'i', 'p', 's', 'z'], "get_distinct_from_nested([['z', 'i', 'g'], ['z', 'a', 'g'], ['b', 'a', 'g', 'p', 'i', 'p', 'e', 's']])")

  def test6(self):
    res = get_distinct_from_nested(['apple', 'banana', 'candy', 'donut', 'eggs'])
    self.assertEqual(res, ['a', 'b', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'p', 's', 't', 'u', 'y'], "get_distinct_from_nested(['apple', 'banana', 'candy', 'donut', 'eggs'])")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-string_intersection_with_set-1-practice" label="exe-sec-HW8-1-31949-practice">
      <title>String Intersection</title>
      <statement>
        <p>Write the definition for a function <c>string_intersection(str1, str2)</c>, which takes two string parameters and returns a sorted list of the characters the two strings have in common.</p>
        <p><alert>Hint</alert>: Use set intersection and the sorted() function.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="70%" />
          <col top="minor" width="30%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>string_intersection("cats", "caterpillar")</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['a', 'c', 't']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>string_intersection("cats", "dogs")</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['s']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>string_intersection("banana", "xylem")</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    res = string_intersection('cats', 'caterpillar')
    self.assertEqual(res, ['a', 'c', 't'], "string_intersection('cats', 'caterpillar')")

  def test2(self):
    res = string_intersection('cats', 'dogs')
    self.assertEqual(res, ['s'], "string_intersection('cats', 'dogs')")

  def test3(self):
    res = string_intersection('banana', 'xylem')
    self.assertEqual(res, [], "string_intersection('banana', 'xylem')")

  def test4(self):
    res = string_intersection('dog-eared', 'dog tails')
    self.assertEqual(res, ['a', 'd', 'g', 'o'], "string_intersection('dog-eared', 'dog tails')")

  def test5(self):
    res = string_intersection('Venus', 'Mars')
    self.assertEqual(res, ['s'], "string_intersection('Venus', 'Mars')")

  def test6(self):
    res = string_intersection('axbxcxd', 'xaxcxfx')
    self.assertEqual(res, ['a', 'c', 'x'], "string_intersection('axbxcxd', 'xaxcxfx')")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-anagram_checker-1-practice" label="exe-sec-HW8-1-103915-practice">
      <title>Write a Program to Check for Anagrams</title>
      <statement>
        <p>Write the code to read two strings (str1, str2) from standard input and print a message regarding whether or not the strings are anagrams (rearrangements) of each other.</p>
        <p><alert>Hint</alert>: Compare sorted lists of characters for the two strings.</p>
        <p>In addition, if the strings are NOT anagrams of each other, give one of the following explanations: "They do not have the same character sets.", or "They do not have the same character frequencies."</p>
        <p>For example, "DOGS" and "GODS" are anagrams. "DOGS" and "HANOVER" do not have the same character sets, while "HANOVER" and "HANOOOVER" do not have the same character frequencies.</p>
        <p>Use set operations to determine if two non-anagrams have the same character set; if they do share the same set of characters, then you may conclude that their character frequencies are the only difference.</p>
        <p>Your code might be about 12 lines long.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>pizzzzzza
piizzaaaa</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>pizzzzzza and piizzaaaa are NOT anagrams.
They do not have the same character frequencies.</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>pizza
pasta</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>pizza and pasta are NOT anagrams.
They do not have the same character sets.</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>maps
spam
</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>maps and spam are anagrams!</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
<tests>
<iotest>
  <input>pizzzzza
piizzaaaa</input>
  <output>pizzzzza and piizzaaaa are NOT anagrams.
They do not have the same character frequencies.
</output>
</iotest>
<iotest>
  <input>pizza
pasta</input>
  <output>pizza and pasta are NOT anagrams.
They do not have the same character sets.
</output>
</iotest>
<iotest>
  <input>maps
spam</input>
  <output>maps and spam are anagrams!
</output>
</iotest>
<iotest>
  <input>HEY
YEH</input>
  <output>HEY and YEH are anagrams!
</output>
</iotest>
<iotest>
  <input>monkey
monkee</input>
  <output>monkey and monkee are NOT anagrams.
They do not have the same character sets.
</output>
</iotest>
<iotest>
  <input>jambaaaaa
jaammbbaa</input>
  <output>jambaaaaa and jaammbbaa are NOT anagrams.
They do not have the same character frequencies.
</output>
</iotest>
<iotest>
  <input>abacad
aaadcb</input>
  <output>abacad and aaadcb are anagrams!
</output>
</iotest>
</tests>
      </program>
    </exercise>
  </exercises>
</section>
