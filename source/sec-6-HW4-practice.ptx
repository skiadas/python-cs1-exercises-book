<section xml:id="sec-HW4-1-practice">
  <title>HW4 Practice</title>
  <introduction />
  <exercises>
    <exercise xml:id="exer-func_between_zero_one-1-practice" label="exe-sec-HW4-1-225598-practice">
      <title>Between 0 and 1</title>
      <statement>
        <p>Write a function called <alert>between_zero_and_one</alert>that takes a parameter num; num will be a number at run time.  The function should return True if num falls strictly between 0 and 1; otherwise, it should return False.</p>
        <p>NOTE: This function does NOT read anything from standard input.</p>
        <p>NOTE: Your function should not print anything to standard output. Use a return statement, not a print statement, at the end of your function.</p>
        <p>Hint: Do not return the strings "True", "False". Boolean values are not quoted.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="70%" />
          <col top="minor" width="30%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>between_zero_and_one(0.5)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>True</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>between_zero_and_one(1.0)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>False</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>between_zero_and_one(-2.2)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>False</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    self.assertEqual(between_zero_and_one(0.5), True, "between_zero_and_one(0.5)")


  def test2(self):
    self.assertEqual(between_zero_and_one(1.0), False, "between_zero_and_one(1.0)")


  def test3(self):
    self.assertEqual(between_zero_and_one(-2.2), False, "between_zero_and_one(-2.2)")


  def test4(self):
    self.assertEqual(between_zero_and_one(0.1001), True, "between_zero_and_one(0.1001)")


  def test5(self):
    self.assertEqual(between_zero_and_one(0.98), True, "between_zero_and_one(0.98)")


  def test6(self):
    self.assertEqual(between_zero_and_one(0.0001), True, "between_zero_and_one(0.0001)")


  def test7(self):
    self.assertEqual(between_zero_and_one(0.0), False, "between_zero_and_one(0.0)")


  def test8(self):
    self.assertEqual(between_zero_and_one(1.001), False, "between_zero_and_one(1.001)")

myTests().main()
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-basic_conditional_divides-1-practice" label="exe-sec-HW4-1-31644-practice">
      <title>Divides</title>
      <statement>
        <p>Define a function <alert>divides</alert>that takes integer parameters <alert>n</alert> and <alert>d</alert>.</p>
        <p><alert>-</alert>If n is a multiple of d, that is, if "d divides n" evenly, the function returns True and prints a message. For example, if n is 12 and d is 2, the message will say, "12 is divisible by 2"</p>
        <p>- Otherwise, the function returns False and prints  a negative message, for example, "12 is not divisible by 11"</p>
        <p>- Your function might  be around 7 lines long.</p>
        <p>Hint 1:  Use the remainder operator and an if-else conditional.</p>
        <p>Hint 2: Do not return the strings "True", "False". Return a Boolean constant, either <alert>True</alert> or <alert>False</alert> (no quotes)</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="60%" />
          <col top="minor" width="40%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>result = divides(12, 2)
print("Return value is", result)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>12 is divisible by 2
Return value is True</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>result = divides(12, 5)
print("Return value is", result)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>12 is not divisible by 5
Return value is False</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = divides(12, 2)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, True, "divides(12, 2) result")
    self.assertEqual(teststdout.getvalue(), "12 is divisible by 2\n", "divides(12, 2) printout")


  def test2(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = divides(12, 5)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, False, "divides(12, 5) result")
    self.assertEqual(teststdout.getvalue(), "12 is not divisible by 5\n", "divides(12, 5) printout")


  def test3(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = divides(8, 3)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, False, "divides(8, 3) result")
    self.assertEqual(teststdout.getvalue(), "8 is not divisible by 3\n", "divides(8, 3) printout")


  def test4(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = divides(8, 4)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, True, "divides(8, 4) result")
    self.assertEqual(teststdout.getvalue(), "8 is divisible by 4\n", "divides(8, 4) printout")


  def test5(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = divides(7, 7)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, True, "divides(7, 7) result")
    self.assertEqual(teststdout.getvalue(), "7 is divisible by 7\n", "divides(7, 7) printout")


  def test6(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = divides(7, -50)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, False, "divides(7, -50) result")
    self.assertEqual(teststdout.getvalue(), "7 is not divisible by -50\n", "divides(7, -50) printout")


  def test7(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = divides(100, 90)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, False, "divides(100, 90) result")
    self.assertEqual(teststdout.getvalue(), "100 is not divisible by 90\n", "divides(100, 90) printout")


  def test8(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = divides(100, -25)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, True, "divides(100, -25) result")
    self.assertEqual(teststdout.getvalue(), "100 is divisible by -25\n", "divides(100, -25) printout")

myTests().main()
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-num_is_even_basic_conditional-1-practice" label="exe-sec-HW4-1-31642-practice">
      <title>Num Is Even</title>
      <statement>
        <p>The function <c>isEven</c>takes one parameter, n (an integer). <c>isEven</c> returns a boolean result.</p>
        <p>- isEven returns <alert>True</alert>if n is even,</p>
        <p>- otherwise isEven returns <alert>False</alert>.</p>
        <p>Define the isEven function.</p>
        <p>Remember: Do not return the strings "True", "False". Return a Boolean constant, either <alert>True</alert> or <alert>False</alert> (no quotes)</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(isEven(39))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>False</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(isEven(26))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>True</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(isEven(11))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>False</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    self.assertEqual(isEven(39), False, "isEven(39)")


  def test2(self):
    self.assertEqual(isEven(26), True, "isEven(26)")


  def test3(self):
    self.assertEqual(isEven(11), False, "isEven(11)")


  def test4(self):
    self.assertEqual(isEven(0), True, "isEven(0)")


  def test5(self):
    self.assertEqual(isEven(-33), False, "isEven(-33)")


  def test6(self):
    self.assertEqual(isEven(7), False, "isEven(7)")

myTests().main()
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-num_is_positive_simple_conditional-1-practice" label="exe-sec-HW4-1-31643-practice">
      <title>isPositive</title>
      <statement>
        <p>The function <c>isPositive</c>takes one parameter, n (a number).</p>
        <p>- If n is positive, the function prints a message stating that n is positive and then returns True</p>
        <p>-  If n is zero, the function prints a message stating that n is zero and then returns False</p>
        <p>- If n is negative, the function prints a message stating that n is negative and then returns False</p>
        <p>Write a definition for isPositive.</p>
        <p>Remember: Do not return "True", "False". Return the Boolean constants: True, False (no quotation marks).</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(isPositive(35))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>35 is positive
True</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(isPositive(0))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0 is zero
False</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(isPositive(-0.1))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-0.1 is negative
False</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = isPositive(35)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, True, "isPositive(35) result")
    self.assertEqual(teststdout.getvalue(), "35 is positive\n", "isPositive(35) printout")


  def test2(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = isPositive(5e-05)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, True, "isPositive(5e-05) result")
    self.assertEqual(teststdout.getvalue(), "5e-05 is positive\n", "isPositive(5e-05) printout")


  def test3(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = isPositive(0)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, False, "isPositive(0) result")
    self.assertEqual(teststdout.getvalue(), "0 is zero\n", "isPositive(0) printout")


  def test4(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = isPositive(-0.1)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, False, "isPositive(-0.1) result")
    self.assertEqual(teststdout.getvalue(), "-0.1 is negative\n", "isPositive(-0.1) printout")


  def test5(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = isPositive(-10)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, False, "isPositive(-10) result")
    self.assertEqual(teststdout.getvalue(), "-10 is negative\n", "isPositive(-10) printout")


  def test6(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    res = isPositive(20)
    sys.stdout = sys.__stdout__
    self.assertEqual(res, True, "isPositive(20) result")
    self.assertEqual(teststdout.getvalue(), "20 is positive\n", "isPositive(20) printout")

myTests().main()
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-divisible_by_3_or_5_nested_decision-1-practice" label="exe-sec-HW4-1-31701-practice">
      <title>Divisible by 3 or 5</title>
      <statement>
        <p>This problem requires a short program, not a function definition.</p>
        <p>Write the code needed to get an integer from standard input.  Then, write a simple decision statement that will output a message reporting whether the number is evenly divisible by 3, or by 5, or both, or neither.  You might need about 10 lines of code.</p>
        <p><em>See the examples for the expected format of the output.</em></p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>-7</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-7 is divisible by neither 3 nor 5</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>60
</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>60 is divisible by both 3 and 5</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>54</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>54 is divisible by 3</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>125</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>125 is divisible by 5</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>2</input>
            <output>2 is divisible by neither 3 nor 5</output>
          </iotest>
          <iotest>
            <input>-7</input>
            <output>-7 is divisible by neither 3 nor 5</output>
          </iotest>
          <iotest>
            <input>60</input>
            <output>60 is divisible by both 3 and 5</output>
          </iotest>
          <iotest>
            <input>-45</input>
            <output>-45 is divisible by both 3 and 5</output>
          </iotest>
          <iotest>
            <input>27</input>
            <output>27 is divisible by 3</output>
          </iotest>
          <iotest>
            <input>54</input>
            <output>54 is divisible by 3</output>
          </iotest>
          <iotest>
            <input>125</input>
            <output>125 is divisible by 5</output>
          </iotest>
          <iotest>
            <input>-1250</input>
            <output>-1250 is divisible by 5</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-func_inside_unit_circle-1-practice" label="exe-sec-HW4-1-160469-practice">
      <title>Is In Unit Circle</title>
      <statement>
        <p>Write a function called is_in_unit_circle that takes two parameters, <alert>x</alert> and <alert>y</alert> (floats), the coordinates of a point in the x-y plane.</p>
        <p>- The function returns <alert>True</alert>if (x, y) is less than one unit away from (0,0) [i.e., if the point (x, y) is inside the unit circle];</p>
        <p>- Otherwise, the function returns <alert>False</alert></p>
        <p><alert>Hint:</alert>Use the distance formula to calculate the distance (or the square of the distance) from (x, y) to (0, 0). Then compare that distance with 1.</p>
        <p><alert>Distance between two points = <m>\sqrt{(x_2-x_1)^2 + (y_2-y_2)^2}</m></alert></p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>is_in_unit_circle(2, .9)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>False</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>is_in_unit_circle(.70, -.61)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>True</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>is_in_unit_circle(.055, .81)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>True</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):

  def test1(self):
    res = is_in_unit_circle(2, 0.9)
    self.assertEqual(res, False, "is_in_unit_circle(2, 0.9)")

  def test2(self):
    res = is_in_unit_circle(0.7, -0.61)
    self.assertEqual(res, True, "is_in_unit_circle(0.7, -0.61)")

  def test3(self):
    res = is_in_unit_circle(0.055, 0.81)
    self.assertEqual(res, True, "is_in_unit_circle(0.055, 0.81)")

  def test4(self):
    res = is_in_unit_circle(0, 0.506)
    self.assertEqual(res, True, "is_in_unit_circle(0, 0.506)")

  def test5(self):
    res = is_in_unit_circle(0.9, 0.5)
    self.assertEqual(res, False, "is_in_unit_circle(0.9, 0.5)")

  def test6(self):
    res = is_in_unit_circle(-0.88, -0.77)
    self.assertEqual(res, False, "is_in_unit_circle(-0.88, -0.77)")

myTests().main()</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-sum_over_a_list_Basic_accumulator-1-practice" label="exe-sec-HW4-1-31564-practice">
      <title>Sum over a list</title>
      <statement>
        <p>Define the function list_sum(L); it takes one parameter L, a list of numbers, and returns the sum of all the items in L.</p>
        <p>Hint: Use the "accumulate a sum" pattern, and use L as the sequence expression in your for loop.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = [9, 6, 8, 5, 7]
list_sum(L)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>35</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = [15, 7, -1, 11, 19, 3, -5]
list_sum(L)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>49</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = []
list_sum(L)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    res = list_sum([9, 6, 8, 5, 7])
    self.assertEqual(res, 35, "list_sum([9, 6, 8, 5, 7])")

  def test2(self):
    res = list_sum([15, 7, -1, 11, 19, 3, -5])
    self.assertEqual(res, 49, "list_sum([15, 7, -1, 11, 19, 3, -5])")

  def test3(self):
    res = list_sum([])
    self.assertEqual(res, 0, "list_sum([])")

  def test4(self):
    res = list_sum([1, 2, 3])
    self.assertEqual(res, 6, "list_sum([1, 2, 3])")

  def test5(self):
    res = list_sum([42])
    self.assertEqual(res, 42, "list_sum([42])")

  def test6(self):
    res = list_sum([15, 7, -1, 11, 19, 3, -5, 1010, 2211, 3321])
    self.assertEqual(res, 6591, "list_sum([15, 7, -1, 11, 19, 3, -5, 1010, 2211, 3321])")

myTests().main()</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-accumulate_list_product-1-practice" label="exe-sec-HW4-1-31638-practice">
      <title>List Product</title>
      <statement>
        <p>Define a function list_product(L) which takes a parameter L, a list of numbers, and returns the product of all the items in L.</p>
        <p>Hint: Use the accumulate-a-product pattern as discussed in class. Remember, you should <alert>not</alert> initialize your accumulator variable to 0 when it represents a product.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = [3, 2, 7, -1, 4]
list_product(L)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-168</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = [55]
list_product(L)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>55</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    res = list_product([3, 2, 7, -1, 4])
    self.assertEqual(res, -168, "list_product([3, 2, 7, -1, 4])")

  def test2(self):
    res = list_product([55])
    self.assertEqual(res, 55, "list_product([55])")

  def test3(self):
    res = list_product([2, 4, 6, 8, 10])
    self.assertEqual(res, 3840, "list_product([2, 4, 6, 8, 10])")

  def test4(self):
    res = list_product([5, 2, -2, -5])
    self.assertEqual(res, 100, "list_product([5, 2, -2, -5])")

  def test5(self):
    res = list_product([2, 3, 5, 7, 11, 13, 17, 19, 23])
    self.assertEqual(res, 223092870, "list_product([2, 3, 5, 7, 11, 13, 17, 19, 23])")

myTests().main()</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-count_negatives_1-1-practice" label="exe-sec-HW4-1-31647-practice">
      <title>Count Negatives in a list</title>
      <statement>
        <p>Define a function count_negatives(L), which takes a list of numbers, L, as its parameter. The function returns an integer count telling how many of the items in L are negative (less than zero).</p>
        <p>Hint: Use the accumulator pattern.</p>
        <p>- Initialize the accumulator to 0</p>
        <p>- Use a for loop to iterate over the items in L</p>
        <p>- Use an if statement to update the accumlator every time the current item is negative</p>
        <p>- Return the accumulator</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="80%" />
          <col top="minor" width="20%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = [0, -10, 2, -8, -4, -6, -2, 6, 4]
count_negatives(L)               </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>5</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = [0, 6, 4]
count_negatives(L)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = [-10, -4, -6, -2, 6, 4]
count_negatives(L)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>4</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    res = count_negatives([0, -10, 2, -8, -4, -6, -2, 6, 4])
    self.assertEqual(res, 5, "count_negatives([0, -10, 2, -8, -4, -6, -2, 6, 4])")

  def test2(self):
    res = count_negatives([0, 6, 4])
    self.assertEqual(res, 0, "count_negatives([0, 6, 4])")

  def test3(self):
    res = count_negatives([-10, -4, -6, -2, 6, 4])
    self.assertEqual(res, 4, "count_negatives([-10, -4, -6, -2, 6, 4])")

  def test4(self):
    res = count_negatives([])
    self.assertEqual(res, 0, "count_negatives([])")

  def test5(self):
    res = count_negatives(list(range(-37, 55, 3)))
    self.assertEqual(res, 13, "count_negatives(list(range(-37, 55, 3)))")

  def test6(self):
    res = count_negatives([-1, -5, -11, -15, -100])
    self.assertEqual(res, 5, "count_negatives([-1, -5, -11, -15, -100])")

  def test7(self):
    res = count_negatives(list(range(-200, 150, 7)))
    self.assertEqual(res, 29, "count_negatives(list(range(-200, 150, 7)))")

myTests().main()</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-count_spam-1-practice" label="exe-sec-HW4-1-31640-practice">
      <title>Count SPAM in list</title>
      <statement>
        <p>Define the function count_SPAM(L), which takes a list of strings, L, as its parameter. The function returns a count of how many times the word "SPAM" occurs as an item in L.</p>
        <p><em>See the examples for the expected format of the output.</em></p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="80%" />
          <col top="minor" width="20%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L  = ["SPAM", "banana", "apple", "SPAM", "tuna"]
count_SPAM(L)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>2</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = ["a", "stitch", "in", "time"]
count_SPAM(L)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = ["SPAM", "SPAM", "SPAM", "egg", "and", "SPAM"]
count_SPAM(L)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>4</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    res = count_SPAM(['SPAM', 'banana', 'apple', 'SPAM', 'tuna'])
    self.assertEqual(res, 2, "count_SPAM(['SPAM', 'banana', 'apple', 'SPAM', 'tuna'])")

  def test2(self):
    res = count_SPAM(['a', 'stitch', 'in', 'time'])
    self.assertEqual(res, 0, "count_SPAM(['a', 'stitch', 'in', 'time'])")

  def test3(self):
    res = count_SPAM(['SPAM', 'SPAM', 'SPAM', 'egg', 'and', 'SPAM'])
    self.assertEqual(res, 4, "count_SPAM(['SPAM', 'SPAM', 'SPAM', 'egg', 'and', 'SPAM'])")

  def test4(self):
    res = count_SPAM(['SPAM', 'SPAM', 'SPAM', 'SPAM', 'SPAM', 'SPAM', 'baked beans and', 'SPAM'])
    self.assertEqual(res, 7, "count_SPAM(['SPAM', 'SPAM', 'SPAM', 'SPAM', 'SPAM', 'SPAM', 'baked beans and', 'SPAM'])")

  def test5(self):
    res = count_SPAM(['spam'])
    self.assertEqual(res, 0, "count_SPAM(['spam'])")

  def test6(self):
    res = count_SPAM([])
    self.assertEqual(res, 0, "count_SPAM([])")

  def test7(self):
    res = count_SPAM(['NO SPAM'])
    self.assertEqual(res, 0, "count_SPAM(['NO SPAM'])")

myTests().main()</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-accumulator_count_divisors-1-practice" label="exe-sec-HW4-1-31648-practice">
      <title>Count Divisors</title>
      <statement>
        <p>Write a short program, approximately 12 lines of code, to read a positive integer n from the keyboard, count the number of  positive integer divisors of n, and print a message reporting that count. In addition, if n is prime, also print, "That's a prime number!".  HINT: A positive integer n is prime provided n has exactly two positive integer divisors, 1 and n.</p>
        <p>For example, the divisors of 12 are 1, 2, 3, 4, 6, 12. There are 6 of them. If n = 12 is read from the keyboard, the program will print, "12 has 6 divisors."</p>
        <p>Warning: Notice that when n = 1, there is only one divisor. So the message needs to say, "1 has 1 divisor" (not "1 has 1 divisors").</p>
        <p><em>See the examples for the expected format of the output.</em></p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>1</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>1 has 1 divisor</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>3</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>3 has 2 divisors
That number is prime!</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>6
</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>6 has 4 divisors</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>
n = int(input())  # n will be positive
        </code>
        <tests>
          <iotest>
            <input>1</input>
            <output>1 has 1 divisor</output>
          </iotest>
          <iotest>
            <input>3</input>
            <output>
              3 has 2 divisors
              That number is prime!
            </output>
          </iotest>
          <iotest>
            <input>6</input>
            <output>6 has 4 divisors</output>
          </iotest>
          <iotest>
            <input>10</input>
            <output>10 has 4 divisors</output>
          </iotest>
          <iotest>
            <input>11</input>
            <output>
              11 has 2 divisors
              That number is prime!
            </output>
          </iotest>
          <iotest>
            <input>40320</input>
            <output>40320 has 96 divisors</output>
          </iotest>
          <iotest>
            <input>40321</input>
            <output>40321 has 4 divisors</output>
          </iotest>
          <iotest>
            <input>513</input>
            <output>513 has 8 divisors</output>
          </iotest>
          <iotest>
            <input>577</input>
            <output>
              577 has 2 divisors
              That number is prime!
            </output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-accum_fib_20-1-practice" label="exe-sec-HW4-1-160096-practice">
      <title>Accumulate Nth Fibonacci</title>
      <statement>
        <p>Write a function <c>F</c>to compute the Nth Fibonnaci number, where N is an integer parameter.</p>
        <p>By definition, F(1) and F(2) are both 1, while later terms are found  by adding the previous two terms to make the next. Algebraically, we define F(N) as follows:</p>
        <p>
          <ul>
            <li>F(1) = F(2) = 1</li>
            <li>When N &gt; 2, F(N) = F(N - 1) + F(N - 2)</li>
          </ul>
        </p>
        <p>So F(3) = F(2) + F(1) = 1  + 1  = 2, F(4) = F(3) +  F(2) = 2 + 1 = 3, F(5) =  5, F(6) =  8, etc.</p>
        <p>When N is positive, F should return the Nth Fibonacci number, F(N); when N is not positive, F should return the Python object <c>None</c>.</p>
        <p><alert>Big Hint</alert>: Use two accumulator variables, <c>previous</c>and <c>current</c>, since we will always add the last two terms to make the next term.</p>
        <p>
          <ul>
            <li>Initialize <c>previous</c>to have the value of F(1), and initialize <c>current</c>to have the value of F(2).</li>
            <li>Think about how many additional terms the for loop needs to calculate to determine F(N) when N &gt; 2. That number is the argument for the range function call in the first line of the loop.</li>
            <li>In the body of the loop, update both accumulators: let <c>next</c>be the sum of <c>previous</c>and <c>current</c>, update <c>previous</c>to equal <c>current</c>, and update <c>current</c>to equal <c>next</c>.</li>
            <li>When the for loop ends, return <alert>current.</alert></li>
          </ul>
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>F(10)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>55</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>F(4)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>3</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>F(3)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>2</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>
def F(N):
        </code>
        <tests>from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    res = F(10)
    self.assertEqual(res, 55, "F(10)")

  def test2(self):
    res = F(4)
    self.assertEqual(res, 3, "F(4)")

  def test3(self):
    res = F(3)
    self.assertEqual(res, 2, "F(3)")

  def test4(self):
    res = F(2)
    self.assertEqual(res, 1, "F(2)")

  def test5(self):
    res = F(1)
    self.assertEqual(res, 1, "F(1)")

  def test6(self):
    res = F(0)
    self.assertEqual(res, None, "F(0)")

  def test7(self):
    res = F(-3)
    self.assertEqual(res, None, "F(-3)")

  def test8(self):
    res = F(32)
    self.assertEqual(res, 2178309, "F(32)")

  def test9(self):
    res = F(20)
    self.assertEqual(res, 6765, "F(20)")

  def test10(self):
    res = F(30)
    self.assertEqual(res, 832040, "F(30)")

myTests().main()</tests>
      </program>
    </exercise>
  </exercises>
</section>
