<section xml:id="sec-HW2-1-practice">
  <title>HW2 Practice</title>
  <introduction />
  <exercises>
    <exercise xml:id="exer-flip_sign_add_3-1-practice" label="exe-sec-HW2-1-269753-practice">
      <title>Flip Sign and Add Three</title>
      <statement>
        <p>Write a short <alert>program</alert> (not a function definition) that will get a decimal value x (type <alert>float</alert>) from standard input and print a message regarding the value of x and the value of 3 - x.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>5.5</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>x is 5.5 and 3 - x is -2.5</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>-8.1</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>x is -8.1 and 3 - x is 11.1</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>0.12</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>x is 0.12 and 3 - x is 2.88</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>5.5</input>
            <output>x is 5.5 and 3 - x is -2.5</output>
          </iotest>
          <iotest>
            <input>-8.1</input>
            <output>x is -8.1 and 3 - x is 11.1</output>
          </iotest>
          <iotest>
            <input>0.12</input>
            <output>x is 0.12 and 3 - x is 2.88</output>
          </iotest>
          <iotest>
            <input>-200.7</input>
            <output>x is -200.7 and 3 - x is 203.7</output>
          </iotest>
          <iotest>
            <input>24.5</input>
            <output>x is 24.5 and 3 - x is -21.5</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-calculate_percent_v2-1-practice" label="exe-sec-HW2-1-269754-practice">
      <title>Calculate the Ratio as a Percentage</title>
      <statement>
        <p>Write the code needed to get two float values from standard input, A and B. Calculate A as a percentage of B, rounded to one decimal place. For example, if A is 25.0 and B is 75.0, A is about 33.3% of B since 25.0 / 75.0 = 1 / 3 = .3333333... (multiply the ratio by 100 to get the percentage).</p>
        <p>Print a message to report the result (using the same format as shown in the examples below).</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>5
15</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>5.0 is about 33.3 percent of 15.0</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>12.5
28.0</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>12.5 is about 44.6 percent of 28.0</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>2.52
8.1</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>2.52 is about 31.1 percent of 8.1</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>
              5
              15
            </input>
            <output>5.0 is about 33.3 percent of 15.0</output>
          </iotest>
          <iotest>
            <input>
              12.5
              28.0
            </input>
            <output>12.5 is about 44.6 percent of 28.0</output>
          </iotest>
          <iotest>
            <input>
              2.52
              8.1
            </input>
            <output>2.52 is about 31.1 percent of 8.1</output>
          </iotest>
          <iotest>
            <input>
              42.3
              540.7
            </input>
            <output>42.3 is about 7.8 percent of 540.7</output>
          </iotest>
          <iotest>
            <input>
              10.5
              48.2
            </input>
            <output>10.5 is about 21.8 percent of 48.2</output>
          </iotest>
          <iotest>
            <input>
              1.01
              100.1
            </input>
            <output>1.01 is about 1.0 percent of 100.1</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-math_sqrt_round-1-practice" label="exe-sec-HW2-1-269755-practice">
      <title>Rounded Square Root</title>
      <statement>
        <p>Write the code needed to get an integer value from standard input, calculate the square root of the value <alert>rounded to the nearest hundredth</alert>, then <alert>print</alert> a message with the result.</p>
        <p><alert>NOTE:</alert> You may assume that the input value will not be negative.</p>
        <p>
          <alert>Reminder</alert>:
          <ul>
            <li>Start by importing the <c>math</c> module.</li>
            <li>Use the function <c>math.sqrt</c> to calculate a square root.</li>
          </ul>
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>11</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>the square root of 11 is about 3.32</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>95</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>the square root of 95 is about 9.75</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>3</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>the square root of 3 is about 1.73</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>
import math
# read the input, as an integer
# use math.sqrt() to calculate the square root
# print message
        </code>
        <tests>
          <iotest>
            <input>11</input>
            <output>the square root of 11 is about 3.32</output>
          </iotest>
          <iotest>
            <input>95</input>
            <output>the square root of 95 is about 9.75</output>
          </iotest>
          <iotest>
            <input>3</input>
            <output>the square root of 3 is about 1.73</output>
          </iotest>
          <iotest>
            <input>1234</input>
            <output>the square root of 1234 is about 35.13</output>
          </iotest>
          <iotest>
            <input>42</input>
            <output>the square root of 42 is about 6.48</output>
          </iotest>
          <iotest>
            <input>255</input>
            <output>the square root of 255 is about 15.97</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-round_float-1-practice" label="exe-sec-HW2-1-269756-practice">
      <title>Round Float</title>
      <statement>
        <p>Write the code needed to get two numbers from standard input:</p>
        <p>
          <ul>
            <li>a decimal value (i.e., a number with a decimal point, which will be read as Python type <alert>float</alert>)</li>
            <li>an integer value</li>
          </ul>
        </p>
        <p>Assign the decimal value to the variable <c>decimal</c> and the integer value to the variable precision (or other reasonable names).Finally, round the value of <c>decimal</c> to the number of places after the decimal point indicated by <c>precision</c>, and <alert>print</alert> the result.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>5.555
1</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>5.6</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>-9.87437
3</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-9.874</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>0.900001
0</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>1.0</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>-42.4444
1</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-42.4</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>
              5.555
              1
            </input>
            <output>5.6</output>
          </iotest>
          <iotest>
            <input>
              -9.87437
              3
            </input>
            <output>-9.874</output>
          </iotest>
          <iotest>
            <input>
              0.900001
              0
            </input>
            <output>1.0</output>
          </iotest>
          <iotest>
            <input>
              -42.4444
              1
            </input>
            <output>-42.4</output>
          </iotest>
          <iotest>
            <input>
              18.500001
              0
            </input>
            <output>19.0</output>
          </iotest>
          <iotest>
            <input>
              12.12345
              4
            </input>
            <output>12.1235</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-div_and_mod-1-practice" label="exe-sec-HW2-1-269757-practice">
      <title>Integer Division and Remainder</title>
      <statement>
        <p>Write the code needed to get two integer values from standard input, assign the first integer to the variable <c>dividend</c>, and assign the second integer to the variable <c>divisor</c>. Calculate two things and <alert>print</alert> the results:</p>
        <p>
          <ol>
            <li>Use integer division (floor division) to calculate how many times the <c>divisor</c> will go into the <c>dividend</c>, excluding the remainder.</li>
            <li>Use the remainder operator to calculate the integer remainder that will be left over when the <c>dividend</c> is divided by the <c>divisor</c>.</li>
          </ol>
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>10
7</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>7 goes into 10 1 times with 3 left over</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>100
35</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>35 goes into 100 2 times with 30 left over</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>10
5</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>5 goes into 10 2 times with 0 left over</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>
              10
              7
            </input>
            <output>7 goes into 10 1 times with 3 left over</output>
          </iotest>
          <iotest>
            <input>
              100
              35
            </input>
            <output>35 goes into 100 2 times with 30 left over</output>
          </iotest>
          <iotest>
            <input>
              10
              5
            </input>
            <output>5 goes into 10 2 times with 0 left over</output>
          </iotest>
          <iotest>
            <input>
              25
              7

            </input>
            <output>7 goes into 25 3 times with 4 left over</output>
          </iotest>
          <iotest>
            <input>
              99
              98
            </input>
            <output>98 goes into 99 1 times with 1 left over</output>
          </iotest>
          <iotest>
            <input>
              14
              6
            </input>
            <output>6 goes into 14 2 times with 2 left over</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-bookcases-1-practice" label="exe-sec-HW2-1-31384-practice">
      <title>Bookcases</title>
      <statement>
        <p>
          You are planning to add bookcases to a wall in your living room, but you don't know how many bookcases to buy. You decide to write a Python <alert>function</alert>, <c>get_num_bookcases</c>, to help. Your function needs to do the following:
          <ol>
            <li>Take parameters for the width of the wall (an integer number of feet) and the width of a bookcase (an integer number of inches). (Your function does not read input from the keyboard; it gets its input through named parameters.)</li>
            <li>Calculate how many whole bookcases will fit on the wall using <alert>modular arithmetic</alert> (use div and/or mod, represented by the operators // and %, as needed to solve the problem).</li>
            <li><alert>Return</alert>the number of bookcases.</li>
          </ol>
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(get_num_bookcases(20, 50))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>4</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(get_num_bookcases(8, 15))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>6</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(get_num_bookcases(3, 40))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>
          def get_num_bookcases(wall_feet, bookcase_inches):
              # function body goes here
        </code>
        <tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def test1(self):
    self.assertEqual(4, get_num_bookcases(20, 50), "20ft wall, 50in bookcases")

  def test2(self):
    self.assertEqual(6, get_num_bookcases(8, 15), "8ft wall, 15in bookcases")


  def test3(self):
    self.assertEqual(7, get_num_bookcases(18, 29), "18ft wall, 29in bookcases")


  def test4(self):
    self.assertEqual(0, get_num_bookcases(3, 40), "3ft wall, 40in bookcases")


  def test5(self):
    self.assertEqual(1, get_num_bookcases(4, 45), "4ft wall, 45in bookcases")


  def test6(self):
    self.assertEqual(54, get_num_bookcases(150, 33), "150ft wall, 33in bookcases")

myTests().main()
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-even_odd_2-1-practice" label="exe-sec-HW2-1-269758-practice">
      <title>Detect Even/Odd</title>
      <statement>
        <p>Write a function with no parameters, <c>even_or_odd()</c></p>
        <p>Specifications:</p>
        <p>
          <ul>
            <li>read an integer from standard input</li>
            <li>return 0 if the integer is even, 1 if the integer is odd</li>
            <li>do not use a conditional ("if") statement, just use modular arithmetic (such as // or %)</li>
            <li>do not print the result, <alert>return</alert> it</li>
          </ul>
        </p>
        <p>Hint: What is the remainder when you divide an even number by 2?  What is the remainder when you divide an odd number by 2?</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="20%" />
          <col top="minor" width="40%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>ans = even_or_odd()
print(ans)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>5</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>1</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>ans = even_or_odd()
print(ans)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-14</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>ans = even_or_odd()
print(ans)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>ans = even_or_odd()
print(ans)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>99</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>1</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <preamble visible="no">
import sys
def input(prompt=None):
  if prompt is not None:
    print(prompt, end='')
  line = sys.stdin.readline()
  if len(line) > 0 and line[-1] == "\n":
    return line[:-1]
  return line

        </preamble>
        <code>

        </code>
        <tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):

  def test1(self):
    sys.stdin = StringIO.StringIO("5")
    res = even_or_odd()
    sys.stdin = sys.__stdin__
    self.assertEqual(res, 1, "Input: 5")

  def test2(self):
    sys.stdin = StringIO.StringIO("-14")
    res = even_or_odd()
    sys.stdin = sys.__stdin__
    self.assertEqual(res, 0, "Input: -14")

  def test3(self):
    sys.stdin = StringIO.StringIO("0")
    res = even_or_odd()
    sys.stdin = sys.__stdin__
    self.assertEqual(res, 0, "Input: 0")

  def test4(self):
    sys.stdin = StringIO.StringIO("99")
    res = even_or_odd()
    sys.stdin = sys.__stdin__
    self.assertEqual(res, 1, "Input: 99")

  def test5(self):
    sys.stdin = StringIO.StringIO("50")
    res = even_or_odd()
    sys.stdin = sys.__stdin__
    self.assertEqual(res, 0, "Input: 50")

  def test6(self):
    sys.stdin = StringIO.StringIO("-121")
    res = even_or_odd()
    sys.stdin = sys.__stdin__
    self.assertEqual(res, 1, "Input: -121")

  def test7(self):
    sys.stdin = StringIO.StringIO("122")
    res = even_or_odd()
    sys.stdin = sys.__stdin__
    self.assertEqual(res, 0, "Input: 122")

myTests().main()
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-for_loop_1_integers_hello_n_times-1-practice" label="exe-sec-HW2-1-222168-practice">
      <title>Spam, N Times</title>
      <statement>
        <p>Write a function, <c>say_spam(⁠⁠n)</c>; it takes an integer parameter n and prints "Spam!" n times in response.</p>
        <p>You should assume n &gt; 0 for this function.</p>
        <p>Hint: Use a simple <c>for</c> loop with a print statement in the body of the loop.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>say_spam(1)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>Spam!</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>say_spam(2)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>Spam!
Spam!</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>say_spam(5)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>Spam!
Spam!
Spam!
Spam!
Spam!</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):

  def test1(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    say_spam(1)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "Spam!\n", "say_spam(1)")

  def test2(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    say_spam(2)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "Spam!\nSpam!\n", "say_spam(2)")


  def test3(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    say_spam(5)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "Spam!\nSpam!\nSpam!\nSpam!\nSpam!\n", "say_spam(5)")


  def test4(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    say_spam(8)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "Spam!\nSpam!\nSpam!\nSpam!\nSpam!\nSpam!\nSpam!\nSpam!\n", "say_spam(8)")

myTests().main()
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-for_loop_2_multiples_of_n-1-practice" label="exe-sec-HW2-1-82943-practice">
      <title>Print Integers Less Than n</title>
      <statement>
        <p>Write a function, <alert><c>print_integers_less_than(⁠n)</c></alert>, which takes an integer parameter n and prints each integer k which is at least 0 and is less than n, in ascending order.</p>
        <p>Hint: use a simple <alert>for</alert> loop.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_integers_less_than(2)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0
1</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_integers_less_than(5)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0
1
2
3
4</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_integers_less_than(-3)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd />
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <postamble visible="no">
        </postamble>
        <tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):
  def test1(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_integers_less_than(2)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "0\n1\n", "print_integers_less_than(2)")

  def test2(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_integers_less_than(5)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "0\n1\n2\n3\n4\n", "print_integers_less_than(5)")

  def test3(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_integers_less_than(-3)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "", "print_integers_less_than(-3)")

  def test4(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_integers_less_than(0)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "", "print_integers_less_than(0)")

  def test5(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_integers_less_than(1)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "0\n", "print_integers_less_than(1)")

  def test6(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_integers_less_than(11)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n", "print_integers_less_than(11)")

  def test7(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_integers_less_than(15)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n", "print_integers_less_than(15)")

myTests().main()
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-for_loop_3_print_cubes-1-practice" label="exe-sec-HW2-1-269759-practice">
      <title>Print Perfect Cubes</title>
      <statement>
        <p>Write a function, <c>print_perfect_cubes(n)</c>, that takes an integer parameter n and prints the perfect cubes starting from <m>0^3 = 0</m> and ending with <m>n^3</m>. When n is negative, the function prints nothing; but do not check for this condition with an "if" statement, it is unnecessary; use a for loop that will automatically print nothing when <m>n &lt; 0</m>.</p>
        <p><alert>Hint for choosing the right range for your for loop</alert>: In the general case, when n is not negative, your function will need to print n+1 different values.</p>
        <p><alert>Hint for printing the first part of the output</alert>: Convert n to a string and then concatenate that string with "^3"; assign the result to a variable, <c>the_cube</c>. Make <c>the_cube</c> the first argument in your print function call.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_perfect_cubes(2)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0^3 = 0
1^3 = 1
2^3 = 8</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_perfect_cubes(5)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0^3 = 0
1^3 = 1
2^3 = 8
3^3 = 27
4^3 = 64
5^3 = 125</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_perfect_cubes(-10)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd />
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <postamble visible="no">
        </postamble>
        <tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):

  def test1(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_perfect_cubes(2)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "0^3 = 0\n1^3 = 1\n2^3 = 8\n", "print_perfect_cubes(2)")

  def test2(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_perfect_cubes(5)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), '0^3 = 0\n1^3 = 1\n2^3 = 8\n3^3 = 27\n4^3 = 64\n5^3 = 125\n', "print_perfect_cubes(5)")

  def test3(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_perfect_cubes(-10)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "", "print_perfect_cubes(-10)")

  def test4(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_perfect_cubes(1)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "0^3 = 0\n1^3 = 1\n", "print_perfect_cubes(1)")

  def test5(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_perfect_cubes(9)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "0^3 = 0\n1^3 = 1\n2^3 = 8\n3^3 = 27\n4^3 = 64\n5^3 = 125\n6^3 = 216\n7^3 = 343\n8^3 = 512\n9^3 = 729\n", "print_perfect_cubes(9)")

  def test6(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_perfect_cubes(13)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "0^3 = 0\n1^3 = 1\n2^3 = 8\n3^3 = 27\n4^3 = 64\n5^3 = 125\n6^3 = 216\n7^3 = 343\n8^3 = 512\n9^3 = 729\n10^3 = 1000\n11^3 = 1331\n12^3 = 1728\n13^3 = 2197\n", "print_perfect_cubes(13)")

myTests().main()
        </tests>
      </program>
    </exercise>
  </exercises>
</section>
