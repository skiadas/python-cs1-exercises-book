<section xml:id="sec-HW3-1-practice">
  <title>HW3 Practice</title>

  <exercises>
    <exercise xml:id="exer-range_t1-1-practice" label="exe-sec-HW3-1-32419-practice">
      <title>Print List: 1 through m</title>
      <statement>
        <p>Write a program to do the following:</p>
        <p>- read a positive integer <alert>m</alert>from standard input</p>
        <p>- use the <alert>list</alert>function and the <alert>range</alert>function to print a list of all the positive integers from 1 through <alert>m</alert>.</p>
        <p>Notice the form of the output is a <alert>list</alert>, which displays as a comma-separated sequence of values enclosed by square brackets.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>5</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[1, 2, 3, 4, 5]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>7</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[1, 2, 3, 4, 5, 6, 7]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>3</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[1, 2, 3]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>
# This problem is solved for you as an example of using list(range())
m = int(input())
print(list(range(1, m + 1)))
        </code>
        <tests>
          <iotest>
            <input>5</input>
            <output>[1, 2, 3, 4, 5]</output>
          </iotest>
          <iotest>
            <input>7</input>
            <output>[1, 2, 3, 4, 5, 6, 7]</output>
          </iotest>
          <iotest>
            <input>3</input>
            <output>[1, 2, 3]</output>
          </iotest>
          <iotest>
            <input>15</input>
            <output>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]</output>
          </iotest>
          <iotest>
            <input>8</input>
            <output>[1, 2, 3, 4, 5, 6, 7, 8]</output>
          </iotest>
          <iotest>
            <input>1</input>
            <output>[1]</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-range_t2-1-practice" label="exe-sec-HW3-1-47624-practice">
      <title>Countdown! Print List: k down to 0</title>
      <statement>
        <p>Write a program which will read a positive integer k from standard input. Use the <alert>list</alert>function and the <alert>range</alert>function to print a list of integers from the given integer k down to 0.</p>
        <p>Notice the form of the output is a list.</p>
        <p><alert>Hint:</alert> When we give the range function 3 arguments, the third argument is the "step size". A negative step size allows us to count down. For example, range(10, 1, -2) is the sequence 10, 8, 6, 4, 2.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>5</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[5, 4, 3, 2, 1, 0]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[0]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>3</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[3, 2, 1, 0]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>5</input>
            <output>[5, 4, 3, 2, 1, 0]</output>
          </iotest>
          <iotest>
            <input>0</input>
            <output>[0]</output>
          </iotest>
          <iotest>
            <input>3</input>
            <output>[3, 2, 1, 0]</output>
          </iotest>
          <iotest>
            <input>12</input>
            <output>[12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</output>
          </iotest>
          <iotest>
            <input>8</input>
            <output>[8, 7, 6, 5, 4, 3, 2, 1, 0]</output>
          </iotest>
          <iotest>
            <input>1</input>
            <output>[1, 0]</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-range_t4-1-practice" label="exe-sec-HW3-1-32423-practice">
      <title>Print List: k down to j</title>
      <statement>
        <p>Write a program which will read two integers, j and k, from standard input. Use the <alert>list</alert>function and the <alert>range</alert>function to print a list of integers from k <alert>down to</alert> j (inclusive).</p>
        <p>Notice the form of the output is a list.</p>
        <p>You may assume that j is less than or equal to k.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>2
5</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[5, 4, 3, 2]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>0
0</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[0]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>-3
3
</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[3, 2, 1, 0, -1, -2, -3]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>
              2
              5
            </input>
            <output>[5, 4, 3, 2]</output>
          </iotest>
          <iotest>
            <input>
              0
              0
            </input>
            <output>[0]</output>
          </iotest>
          <iotest>
            <input>
              -3
              3
            </input>
            <output>[3, 2, 1, 0, -1, -2, -3]</output>
          </iotest>
          <iotest>
            <input>
              7
              15
            </input>
            <output>[15, 14, 13, 12, 11, 10, 9, 8, 7]</output>
          </iotest>
          <iotest>
            <input>
              0
              8
            </input>
            <output>[8, 7, 6, 5, 4, 3, 2, 1, 0]</output>
          </iotest>
          <iotest>
            <input>
              41
              42
            </input>
            <output>[42, 41]</output>
          </iotest>
          <iotest>
            <input>
              55
              77
            </input>
            <output>[77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55]</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-range_b3-1-practice" label="exe-sec-HW3-1-32422-practice">
      <title>Print List of Evens from -10 to k</title>
      <statement>
        <p>Write a program which will read an integer k from standard input. Use the <alert>list</alert>function and the <alert>range</alert>function to print a list of the <alert>even</alert> integers from -10 up to k (inclusive).</p>
        <p>Notice the form of the output is a list.</p>
        <p>NOTE: If k is less than -10, your range command should automatically produce an empty sequence, resulting in an empty list being printed.Â  See the provided examples.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>5</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[-10, -8, -6, -4, -2, 0, 2, 4]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>-11</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>11</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>2</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[-10, -8, -6, -4, -2, 0, 2]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>5</input>
            <output>[-10, -8, -6, -4, -2, 0, 2, 4]</output>
          </iotest>
          <iotest>
            <input>-11</input>
            <output>[]</output>
          </iotest>
          <iotest>
            <input>11</input>
            <output>[-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]</output>
          </iotest>
          <iotest>
            <input>1</input>
            <output>[-10, -8, -6, -4, -2, 0]</output>
          </iotest>
          <iotest>
            <input>2</input>
            <output>[-10, -8, -6, -4, -2, 0, 2]</output>
          </iotest>
          <iotest>
            <input>25</input>
            <output>[-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-for_loop_multiples_of_m-1-practice" label="exe-sec-HW3-1-32418-practice">
      <title>Print Multiples of m</title>
      <statement>
        <p>Define a function <c>print_multiples(m)</c> that takes a positive integer parameter, m, and prints all the <em>multiples</em>of m which areÂ  between 1 and 100, inclusive.</p>
        <p>Use a for loop to print one number per line of output.</p>
        <p><alert>Hint:</alert> The first multiple of m is m. Then m + m, then m + m + m, etc.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="70%" />
          <col top="minor" width="30%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>m = 25
print_multiples(m)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>25
50
75
100</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>m = 45
print_multiples(m)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>45
90</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>m = 32
print_multiples(m)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>32
64
96</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):

  def test1(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_multiples(25)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "25\n50\n75\n100\n", "print_multiples(25)")

  def test2(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_multiples(45)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "45\n90\n", "print_multiples(45)")

  def test3(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_multiples(32)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "32\n64\n96\n", "print_multiples(32)")

  def test4(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_multiples(105)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "", "print_multiples(105)")

  def test5(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_multiples(33)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "33\n66\n99\n", "print_multiples(33)")

  def test6(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_multiples(12)
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "12\n24\n36\n48\n60\n72\n84\n96\n", "print_multiples(12)")

myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-range_b4-1-practice" label="exe-sec-HW3-1-32427-practice">
      <title>Print List of Integers from 1 through maximum, with a Condition</title>
      <statement>
        <p>Read two positive integers, <alert>k</alert>and <alert>maximum</alert>, from standard input.</p>
        <p>Use the <alert>range</alert>function to print a list of all the integers x between 1 and maximum inclusive such that x % k is 1.</p>
        <p>Notice the form of the output is a list.</p>
        <p><alert>Hint:</alert>The first number is 1. The next number (if there is a next number) is 1 + k. Then 1 + k + k, etc. What is the step size for this use of the range function?</p>
        <p><alert>Note</alert>: DO NOT use an "if" statement, just print the list of a range.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>5
18
</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[1, 6, 11, 16]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>2
3</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[1, 3]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>7
25</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[1, 8, 15, 22]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>
              5
              18
            </input>
            <output>[1, 6, 11, 16]</output>
          </iotest>
          <iotest>
            <input>
              2
              3
            </input>
            <output>[1, 3]</output>
          </iotest>
          <iotest>
            <input>
              7
              25
            </input>
            <output>[1, 8, 15, 22]</output>
          </iotest>
          <iotest>
            <input>
              13
              51
            </input>
            <output>[1, 14, 27, 40]</output>
          </iotest>
          <iotest>
            <input>
              9
              37
            </input>
            <output>[1, 10, 19, 28, 37]</output>
          </iotest>
          <iotest>
            <input>
              25
              500
            </input>
            <output>[1, 26, 51, 76, 101, 126, 151, 176, 201, 226, 251, 276, 301, 326, 351, 376, 401, 426, 451, 476]</output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-count_from_j_to_k-1-practice" label="exe-sec-HW3-1-31083-practice">
      <title>Count from j to k</title>
      <statement>
        <p>Write the code needed to get integers j and k from standard input, then use a <alert>for loop</alert> to print out all the integers from j through k. You can assume that k will be more than j.</p>
        <p>Each number should be printed on a separate line.Â See the examples for the expected format of the output.</p>
        <p><alert>Hint</alert>: You need to use a for loop to iterate over a specific sequence of integers. Start by determining a correct call to the range function to create that sequence.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>2
4
</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>2
3
4</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>-3
1</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-3
-2
-1
0
1</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>5
6
</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>5
6</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>
              2
              4
            </input>
            <output>
              2
              3
              4
            </output>
          </iotest>
          <iotest>
            <input>
              -3
              1
            </input>
            <output>
              -3
              -2
              -1
              0
              1
            </output>
          </iotest>
          <iotest>
            <input>
              5
              6
            </input>
            <output>
              5
              6
            </output>
          </iotest>
          <iotest>
            <input>
              11
              15
            </input>
            <output>
              11
              12
              13
              14
              15
            </output>
          </iotest>
          <iotest>
            <input>
              -3
              3
            </input>
            <output>
              -3
              -2
              -1
              0
              1
              2
              3
            </output>
          </iotest>
          <iotest>
            <input>
              0
              12
            </input>
            <output>
              0
              1
              2
              3
              4
              5
              6
              7
              8
              9
              10
              11
              12
            </output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-for_loop_count_by_twos-1-practice" label="exe-sec-HW3-1-269760-practice">
      <title>For Loop: Count by Twos</title>
      <statement>
        <p>Write the code needed to get two integers, j and k, from standard input. Using a <c>for</c> loop and the <c>range</c> function, "count" by twos from j to k (inclusive), one integer per line. You may assume that j is less than or equal to k.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="30%" />
          <col top="minor" width="70%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>4
11</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>4
6
8
10</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>1
5</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>1
3
5</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>-3
3
</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-3
-1
1
3</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>8
16</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>8
10
12
14
16</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python3">
        <code>

        </code>
        <tests>
          <iotest>
            <input>
              4
              11
            </input>
            <output>
              4
              6
              8
              10
            </output>
          </iotest>
          <iotest>
            <input>
              1
              5
            </input>
            <output>
              1
              3
              5
            </output>
          </iotest>
          <iotest>
            <input>
              -3
              3
            </input>
            <output>
              -3
              -1
              1
              3
            </output>
          </iotest>
          <iotest>
            <input>
              20
              29
            </input>
            <output>
              20
              22
              24
              26
              28
            </output>
          </iotest>
          <iotest>
            <input>
              -1
              0
            </input>
            <output>
              -1
            </output>
          </iotest>
          <iotest>
            <input>
              15
              20
            </input>
            <output>
              15
              17
              19
            </output>
          </iotest>
          <iotest>
            <input>
              8
              16
            </input>
            <output>
              8
              10
              12
              14
              16
            </output>
          </iotest>
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-accum_sum_start_to_stop-1-practice" label="exe-sec-HW3-1-31933-practice">
      <title>Summit</title>
      <statement>
        <p>The function <c>summit</c> takes two integer parameters, <c>start</c> and <c>stop</c>, and returns the sum of all integers from <c>start</c> to <c>stop</c>, inclusive.Â For example, <c>summit(-2, 3)</c> <alert>returns</alert>the value of -2 + -1 + 0 + 1 + 2 + 3, which is 3. You may assume that <c>start &lt;= stop</c>.</p>
        <p>Write a definition for <alert>summit</alert>.</p>
        <p>Use the <alert>accumulate-a-sum</alert>pattern to solve this problem:</p>
        <p>- Initialize the accumulator variable.</p>
        <p>- Start a for loop to iterate over the required sequence of integers (make a call to the range function); <c>for num in range(....):</c></p>
        <p>- Inside the for loop, update the accumulator by adding <c>num</c>to the accumulator.</p>
        <p>- After the for loop, return the value of the accumulator variable.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(summit(1, 3))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>6</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(summit(4, 9))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>39</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(summit(25, 25))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>25</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(summit(-10, 23))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>221</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>
def summit(start, stop):
        </code>
        <tests>from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):

  def test1(self):
    self.assertEqual(summit(1, 3), 6, "summit(1, 3)")

  def test2(self):
    self.assertEqual(summit(4, 9), 39, "summit(4, 9)")

  def test3(self):
    self.assertEqual(summit(25, 25), 25, "summit(25, 25)")

  def test4(self):
    self.assertEqual(summit(10, 11), 21, "summit(10, 11)")

  def test5(self):
    self.assertEqual(summit(100, 110), 1155, "summit(100, 110)")

  def test6(self):
    self.assertEqual(summit(-10, 23), 221, "summit(-10, 23)")

myTests().main()</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-accum_odds_sum_1_to_n-1-practice" label="exe-sec-HW3-1-31932-practice">
      <title>Sum Odds from 1 to n (accumulate a sum)</title>
      <statement>
        <p>The function <c>summation</c> takes a positive integer <c>n</c> and <alert>returns</alert>the sum of all the odd integers from 1 through <c>n</c>.Â  For example, summation(5) returns 9 since 1 + 3 + 5 equals 9.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(summation(5))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>9</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(summation(1))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>1</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(summation(1001))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>251001</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    self.assertEqual(summation(5), 9, "summation(5)")


  def test2(self):
    self.assertEqual(summation(10), 25, "summation(10)")


  def test3(self):
    self.assertEqual(summation(1), 1, "summation(1)")


  def test4(self):
    self.assertEqual(summation(99), 2500, "summation(99)")


  def test5(self):
    self.assertEqual(summation(3), 4, "summation(3)")


  def test6(self):
    self.assertEqual(summation(1001), 251001, "summation(1001)")


  def test7(self):
    self.assertEqual(summation(23), 144, "summation(23)")

myTests().main()</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-accum_sum_squares-1-practice" label="exe-sec-HW3-1-32037-practice">
      <title>Sum of Squares (accumulate a sum)</title>
      <statement>
        <p id="yui_3_17_2_1_1599507369757_1953">The function <c>sum_of_squares</c> takes a parameter n and returns the sum of squaresÂ <m>1^2+2^2+3^2+ \cdots + n^2</m></p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(sum_of_squares(3))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>14</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(sum_of_squares(2))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>5</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    self.assertEqual(sum_of_squares(3), 14, "sum_of_squares(3)")


  def test2(self):
    self.assertEqual(sum_of_squares(2), 5, "sum_of_squares(2)")


  def test3(self):
    self.assertEqual(sum_of_squares(1), 1, "sum_of_squares(1)")


  def test4(self):
    self.assertEqual(sum_of_squares(100), 338350, "sum_of_squares(100)")


  def test5(self):
    self.assertEqual(sum_of_squares(1000), 333833500, "sum_of_squares(1000)")


  def test6(self):
    self.assertEqual(sum_of_squares(2345), 4301154445, "sum_of_squares(2345)")

myTests().main()</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-accum_partial_sum-1-practice" label="exe-sec-HW3-1-158384-practice">
      <title>Accumulate the nth partial sum of an infinite series</title>
      <statement>
        <p>
          Write a function <c>partial_sum(n)</c> which accumulates and returns the sum of the first n terms of the infinite sequence
          <md>
            <mrow>\frac{1}{2} + \frac{1}{4} + \frac{1}{8} + \frac{1}{16} + \frac{1}{32} + \cdots</mrow>
          </md>
        </p>
        <p><alert>Note:</alert> n will be a positive integer. For example, when n is 3, the return value is <c>1/2 + 1/4 + 1/8</c> (the result from adding the first three terms), which equals <c>0.875</c>.</p>
        <p><alert>Hint:</alert> Each denominator is twice as large as the previous denominator. The nth denominator is <m>2^n</m>. You might solve this problem using two accumulators: <c>acc</c>could be the accumulated sum so far, and <c>denom</c>could be the value for the denominator of the next term to be added.
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>ans = partial_sum(3)
print(ans)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0.875</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>ans = partial_sum(6)
print(ans)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0.984375</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>ans = partial_sum(9)
print(ans)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0.998046875</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):

  def test1(self):
    self.assertEqual(partial_sum(1), 0.5, "partial_sum(1)")

  def test2(self):
    self.assertEqual(partial_sum(3), 0.875, "partial_sum(3)")

  def test3(self):
    self.assertEqual(partial_sum(6), 0.984375, "partial_sum(6)")

  def test4(self):
    self.assertEqual(partial_sum(7), 0.9921875, "partial_sum(7)")

  def test5(self):
    self.assertEqual(partial_sum(9), 0.998046875, "partial_sum(9)")

myTests().main()
        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-accum_factorial-1-practice" label="exe-sec-HW3-1-269761-practice">
      <title>Factorial Function (accumulate a product)</title>
      <statement>
        <p>
          The function <c>factorial</c> takes a non-negative integer parameter, <c>n</c>, and <alert>returns</alert>the value of n factorial (n!). Note:
          <ul>
            <li>When n is positive, n! = 1 * 2 * 3 * ... * n.Â  For example, 5! = 1 * 2 * 3 * 4 * 5 = 120.</li>
            <li>When n is zero, n! is defined to be 1. (Function returns 1.)</li>
          </ul>
        </p>
        <p>Note: DO NOT use an "if" statement to check whether n is zero. Your accumulator should automatically find the correct answer in this case (0! = 1).</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(factorial(3))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>6</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(factorial(4))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>24</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(factorial(0))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>1</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test4(self):
    self.assertEqual(factorial(3), 6, "factorial(3)")


  def test5(self):
    self.assertEqual(factorial(4), 24, "factorial(4)")


  def test3(self):
    self.assertEqual(factorial(0), 1, "factorial(0)")


  def test8(self):
    self.assertEqual(factorial(7), 5040, "factorial(7)")


  def test9(self):
    self.assertEqual(factorial(8), 40320, "factorial(8)")


  def test12(self):
    self.assertEqual(factorial(11), 39916800, "factorial(11)")


  def test16(self):
    self.assertEqual(factorial(15), 1307674368000, "factorial(15)")


  def test14(self):
    self.assertEqual(factorial(13), 6227020800, "factorial(13)")


  def test13(self):
    self.assertEqual(factorial(12), 479001600, "factorial(12)")


  def test10(self):
    self.assertEqual(factorial(1), 1, "factorial(1)")

myTests().main()
        </tests>
      </program>
    </exercise>
  </exercises>
</section>
