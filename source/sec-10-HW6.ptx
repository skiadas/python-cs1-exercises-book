<section xml:id="sec-HW6-1">
  <title>HW6</title>
  <introduction>
    <p dir="ltr">Lists</p>
  </introduction>
  <exercises>
    <exercise xml:id="exer-front_two-1" label="exe-sec-HW6-1-31905">
      <title>Front Two</title>
      <statement>
        <p>Given a list, <c>L</c>, the function <c>front_two</c> creates a new list of length 2 out of the first two items in <c>L</c> as follows:</p>
        <p>
          <ul>
            <li>In the new list, the second item becomes the first item, and the first item becomes the second.</li>
            <li>If <c>L</c> contains only one item, the first item in the new list should be the value <c>None</c>.</li>
            <li>If <c>L</c> is empty, both items in the new list should be value <c>None</c>.</li>
            <li>The function returns the new list.</li>
          </ul>
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>front_two(['a', 'b', 'c', 'd'])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['b', 'a']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>front_to([])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[None, None]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>front_two([5, 2])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[2, 5]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>front_two([7])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[None, 7]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>
def front_two(L):
        </code>
<tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):


  def test1(self):
    res = front_two(['a', 'b', 'c', 'd'])
    self.assertEqual(res, ['b', 'a'], "front_two(['a', 'b', 'c', 'd'])")

  def test2(self):
    res = front_two(['one'])
    self.assertEqual(res, [None, 'one'], "front_two(['one'])")

  def test3(self):
    res = front_two([])
    self.assertEqual(res, [None, None], "front_two([])")

  def test4(self):
    res = front_two([5, 2])
    self.assertEqual(res, [2, 5], "front_two([5, 2])")

  def test5(self):
    res = front_two([10, -14, 99, 35, 18, -10])
    self.assertEqual(res, [-14, 10], "front_two([10, -14, 99, 35, 18, -10])")

  def test6(self):
    res = front_two([7])
    self.assertEqual(res, [None, 7], "front_two([7])")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-func_print_items_reverse-1" label="exe-sec-HW6-1-31906">
      <title>Print Reverse</title>
      <statement>
        <p>The function <c>print_reverse</c> takes one parameter, <c>L</c>, which is a list. Â The function then prints the items in the list <alert>in reverse order</alert>, one item per line, <alert>WITHOUT changing the value of <c>L</c></alert>.</p>
        <p>Write the function definition.</p>
        <p>Note 1: This function does NOT get anything from standard input.</p>
        <p>Note 2: This function DOES, however, print to standard output.</p>
        <p>Note 3: You should NOT return anything from this function (let it return <c>None</c>by default).</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="70%" />
          <col top="minor" width="30%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_reverse(['apple', 'banana', 'cherry'])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>cherry
banana
apple</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_reverse(['happy'])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>happy</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print_reverse([])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd />
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_reverse(['apple', 'banana', 'cherry'])
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "cherry\nbanana\napple\n", "print_reverse(['apple', 'banana', 'cherry'])")

  def test2(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_reverse(['hi', 'howdy', 'hola', "g'day", 'bonjour'])
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "bonjour\ng'day\nhola\nhowdy\nhi\n", "print_reverse(['hi', 'howdy', 'hola', \"g'day\", 'bonjour'])")

  def test3(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_reverse([2, 4, 6, 8])
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "8\n6\n4\n2\n", "print_reverse([2, 4, 6, 8])")

  def test4(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_reverse(['happy'])
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "happy\n", "print_reverse(['happy'])")

  def test5(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_reverse([])
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "", "print_reverse([])")

  def test6(self):
    teststdout = StringIO.StringIO()
    sys.stdout = teststdout
    print_reverse(['eanie', 'meanie', 'miney', 'mail', 'catch', 'a', 'python', 'by', 'its', 'TAIL'])
    sys.stdout = sys.__stdout__
    self.assertEqual(teststdout.getvalue(), "TAIL\nits\nby\npython\na\ncatch\nmail\nminey\nmeanie\neanie\n", "print_reverse(['eanie', 'meanie', 'miney', 'mail', 'catch', 'a', 'python', 'by', 'its', 'TAIL'])")

myTests().main()
</tests>
</program>
    </exercise>
    <exercise xml:id="exer-sum_evens-1" label="exe-sec-HW6-1-31990">
      <title>Sum Evens</title>
      <statement>
        <p>The function <c>sum_evens</c> takes a list of integers and returns the <alert>sum</alert> of all the even integers in the list.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>sum_evens([1, 5, 2, 5, 3, 5, 4])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>6</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>sum_evens([5, 5, -5, -5])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>sum_evens([16, 24, 30])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>70</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
        <tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):

  def test1(self):
    res = sum_evens([1, 5, 2, 5, 3, 5, 4])
    self.assertEqual(res, 6, "sum_evens([1, 5, 2, 5, 3, 5, 4])")

  def test2(self):
    res = sum_evens([5, 5, -5, -5])
    self.assertEqual(res, 0, "sum_evens([5, 5, -5, -5])")

  def test3(self):
    res = sum_evens([16, 24, 30])
    self.assertEqual(res, 70, "sum_evens([16, 24, 30])")

  def test4(self):
    res = sum_evens([-1, 0, 0, 0, 1])
    self.assertEqual(res, 0, "sum_evens([-1, 0, 0, 0, 1])")

  def test5(self):
    res = sum_evens([-2, 4, -6, 8])
    self.assertEqual(res, 4, "sum_evens([-2, 4, -6, 8])")

  def test6(self):
    res = sum_evens([9, 5, 100, 3, 7])
    self.assertEqual(res, 100, "sum_evens([9, 5, 100, 3, 7])")

  def test7(self):
    res = sum_evens([])
    self.assertEqual(res, 0, "sum_evens([])")

  def test8(self):
    res = sum_evens([2, 5, 0])
    self.assertEqual(res, 2, "sum_evens([2, 5, 0])")

  def test9(self):
    res = sum_evens([-18])
    self.assertEqual(res, -18, "sum_evens([-18])")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-count_contains_x-1" label="exe-sec-HW6-1-32010">
      <title>Count Contains 'og'</title>
      <statement>
        <p>The function <c>count_contains_og</c>takes a list of strings and returns how many strings in the list contain 'og' / 'OG' / 'oG' / 'Og' (check for 'og', ignoring case).</p>
        <p><alert>Hint</alert>: Use the sequence membership operator <alert>in</alert> to help you check for 'og' in the individual strings. Create a <alert>lower-cased</alert> version of the string (<c>lower</c>), then use the <c>in</c> operator.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="80%" />
          <col top="minor" width="20%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>count_contains_og(['cat', 'dog', 'FROG', 'monkey'])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>2</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>count_contains_og(["X", "x"])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>count_contains_og(["Doggie"])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>1</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    res = count_contains_og(['cat', 'dog', 'FROG', 'monkey'])
    self.assertEqual(res, 2, "count_contains_og(['cat', 'dog', 'FROG', 'monkey'])")

  def test2(self):
    res = count_contains_og(['lOg', 'LoG', 'FOGGY', 'tree', '', 'gogogo'])
    self.assertEqual(res, 4, "count_contains_og(['lOg', 'LoG', 'FOGGY', 'tree', '', 'gogogo'])")

  def test3(self):
    res = count_contains_og(['X', 'x'])
    self.assertEqual(res, 0, "count_contains_og(['X', 'x'])")

  def test4(self):
    res = count_contains_og([])
    self.assertEqual(res, 0, "count_contains_og([])")

  def test5(self):
    res = count_contains_og(['UNO'])
    self.assertEqual(res, 0, "count_contains_og(['UNO'])")

  def test6(self):
    res = count_contains_og(['Doggie'])
    self.assertEqual(res, 1, "count_contains_og(['Doggie'])")

  def test7(self):
    res = count_contains_og(['go', 'dogs', 'go', 'DOGS', 'GO', 'ods'])
    self.assertEqual(res, 2, "count_contains_og(['go', 'dogs', 'go', 'DOGS', 'GO', 'ods'])")

  def test8(self):
    res = count_contains_og(['DOG', 'DOG', 'DOG', 'DOG', 'DOG', 'DOG', 'DOG', 'DOG', 'DOG', 'DOG'])
    self.assertEqual(res, 10, "count_contains_og(['DOG', 'DOG', 'DOG', 'DOG', 'DOG', 'DOG', 'DOG', 'DOG', 'DOG', 'DOG'])")

myTests().main()
</tests>      </program>
    </exercise>
    <exercise xml:id="exer-ffirst_negative_trickier-1" label="exe-sec-HW6-1-32045">
      <title>First Negative</title>
      <statement>
        <p>Define the function <c>first_negative(nums)</c> takes one parameter. <c>nums</c>, a possibly empty list of numbers. The function then returns the first negative item in <c>numlist</c>.</p>
        <p>Note: if there are <alert>NO</alert> negative numbers in the list, the function returns the Python object <c>None</c>.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="80%" />
          <col top="minor" width="20%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>first_negative([1, 3, 9, -2])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-2</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>first_negative([1, 3, 9, 2])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>None</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>first_negative([1, -3, -9, -2])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-3</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>first_negative([0, -1.1, 0, -2.2, 0, -3.3, 0])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-1.1</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    res = first_negative([1, 3, 9, -2])
    self.assertEqual(res, -2, "first_negative([1, 3, 9, -2])")

  def test2(self):
    res = first_negative([1, 3, 9, 2])
    self.assertEqual(res, None, "first_negative([1, 3, 9, 2])")

  def test3(self):
    res = first_negative([1, -3, -9, -2])
    self.assertEqual(res, -3, "first_negative([1, -3, -9, -2])")

  def test4(self):
    res = first_negative([0, -1.1, 0, -2.2, 0, -3.3, 0])
    self.assertEqual(res, -1.1, "first_negative([0, -1.1, 0, -2.2, 0, -3.3, 0])")

  def test5(self):
    res = first_negative([0.0, 0.0, 0.0, -99.0, -98.0, -97.0])
    self.assertEqual(res, -99.0, "first_negative([0.0, 0.0, 0.0, -99.0, -98.0, -97.0])")

  def test6(self):
    res = first_negative([-100])
    self.assertEqual(res, -100, "first_negative([-100])")

  def test7(self):
    res = first_negative([])
    self.assertEqual(res, None, "first_negative([])")

  def test8(self):
    res = first_negative([-3, -4, -5])
    self.assertEqual(res, -3, "first_negative([-3, -4, -5])")

  def test9(self):
    res = first_negative([1.1])
    self.assertEqual(res, None, "first_negative([1.1])")

  def test10(self):
    res = first_negative([-0.005, 0.005, -0.004])
    self.assertEqual(res, -0.005, "first_negative([-0.005, 0.005, -0.004])")

myTests().main()
</tests>      </program>
    </exercise>
    <exercise xml:id="exer-square_nums_1-1" label="exe-sec-HW6-1-32004">
      <title>Square Nums 1</title>
      <statement>
        <p>Define the function <c>square_nums</c> which takes a list of numbers, <c>numlist</c>, and returns a NEW list containing the squares of the numbers in the original list.Â  The given list, <c>numlist</c>, should not be changed.</p>
        <p><alert>Note</alert>: Use the accumulator pattern and <c>newlist.append(item)</c> to solve this problem.</p>
        <p>
          <ul>
            <li>The accumulator variable, <alert>newlist</alert>, should be initialized to an empty list.</li>
            <li>Inside a <alert>for loop</alert> which iterates over numlist, use <alert>append</alert> to update the value of newlist.</li>
          </ul>
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>square_nums([1, 2, 3, 4, 5])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[1, 4, 9, 16, 25]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>square_nums([-5, 0, 6])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[25, 0, 36]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>square_nums([])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    lst = [1, 2, 3, 4, 5]
    lst_copy = lst[:]
    res = square_nums(lst)
    self.assertEqual(res, [1, 4, 9, 16, 25], "square_nums([1, 2, 3, 4, 5])")
    self.assertEqual(lst_copy, lst, "checking did not change original")

  def test2(self):
    lst = [-5, 0, 6]
    lst_copy = lst[:]
    res = square_nums(lst)
    self.assertEqual(res, [25, 0, 36], "square_nums([-5, 0, 6])")
    self.assertEqual(lst_copy, lst, "checking did not change original")

  def test3(self):
    lst = []
    lst_copy = lst[:]
    res = square_nums(lst)
    self.assertEqual(res, [], "square_nums([])")
    self.assertEqual(lst_copy, lst, "checking did not change original")

  def test4(self):
    lst = [11.0, 34.5]
    lst_copy = lst[:]
    res = square_nums(lst)
    self.assertEqual(res, [121.0, 1190.25], "square_nums([11.0, 34.5])")
    self.assertEqual(lst_copy, lst, "checking did not change original")

  def test5(self):
    lst = [1.2]
    lst_copy = lst[:]
    res = square_nums(lst)
    self.assertEqual(res, [1.44], "square_nums([1.2])")
    self.assertEqual(lst_copy, lst, "checking did not change original")

  def test6(self):
    lst = [-3, -2, -1, 0]
    lst_copy = lst[:]
    res = square_nums(lst)
    self.assertEqual(res, [9, 4, 1, 0], "square_nums([-3, -2, -1, 0])")
    self.assertEqual(lst_copy, lst, "checking did not change original")

  def test7(self):
    lst = [1, 2, -1, 1, 2, 0, 10, 10, 10, 9, -8]
    lst_copy = lst[:]
    res = square_nums(lst)
    self.assertEqual(res, [1, 4, 1, 1, 4, 0, 100, 100, 100, 81, 64], "square_nums([1, 2, -1, 1, 2, 0, 10, 10, 10, 9, -8])")
    self.assertEqual(lst_copy, lst, "checking did not change original")

myTests().main()
</tests>
</program>
    </exercise>
    <exercise xml:id="exer-make_list_items_upper_2-1" label="exe-sec-HW6-1-31105">
      <title>Make List Items Uppercase 2</title>
      <statement>
        <p>Define the function <c>make_uppercase(mylist)</c>, which takes a list parameter <c>mylist</c> (a list of strings), mutates the list by uppercasing each string in mylist. The function returns <c>None</c>.</p>
        <p>For example, if <c>mylist</c> is <c>['cat', 'Dog', 'frOG']</c>, then the mutated list shouldÂ  be <c>['CAT', 'DOG', 'FROG']</c>.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="60%" />
          <col top="minor" width="40%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>make_uppercase(['cat', 'Dog', 'frOG'])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['CAT', 'DOG', 'FROG']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>make_uppercase(['baNanas', 'appLes', 'pEAches', 'PEArs'])</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['BANANAS', 'APPLES', 'PEACHES', 'PEARS']</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    lst = ['cat', 'Dog', 'frOG']
    res = make_uppercase(lst)
    self.assertEqual(lst, ['CAT', 'DOG', 'FROG'], "make_uppercase(['cat', 'Dog', 'frOG'])")
    self.assertEqual(res, None, "return None")

  def test2(self):
    lst = ['baNanas', 'appLes', 'pEAches', 'PEArs']
    res = make_uppercase(lst)
    self.assertEqual(lst, ['BANANAS', 'APPLES', 'PEACHES', 'PEARS'], "make_uppercase(['baNanas', 'appLes', 'pEAches', 'PEArs'])")
    self.assertEqual(res, None, "return None")

  def test3(self):
    lst = ['w', 'x', 'y', 'z', 'yes']
    res = make_uppercase(lst)
    self.assertEqual(lst, ['W', 'X', 'Y', 'Z', 'YES'], "make_uppercase(['w', 'x', 'y', 'z', 'yes'])")
    self.assertEqual(res, None, "return None")

  def test4(self):
    lst = []
    res = make_uppercase(lst)
    self.assertEqual(lst, [], "make_uppercase([])")
    self.assertEqual(res, None, "return None")

  def test5(self):
    lst = ['cOw', 'HoRse', 'pig', 'BUNNy']
    res = make_uppercase(lst)
    self.assertEqual(lst, ['COW', 'HORSE', 'PIG', 'BUNNY'], "make_uppercase(['cOw', 'HoRse', 'pig', 'BUNNy'])")
    self.assertEqual(res, None, "return None")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-build_list_from_input-1" label="exe-sec-HW6-1-271602">
      <title>Build List from Input</title>
      <statement>
        <p>
          Write a function, build_list<c>()</c>, to read words from standard input and store them in a list.
          <ul>
            <li>You may assume that there will be fewer than 100 words.</li>
            <li>If the string "STOP" is given as input before 100 words have been added to the list, stop the for loop and return the accumulated list of strings</li>
          </ul>
          <h3>Hints:</h3>
        </p>
        <p>- Use the accumulate-a-list pattern, with <c>acc_list</c> initialized to the empty list, <c>[]</c> - Use a for loop to iterate i over <c>range(100)</c> - When STOP is read from input, <c>break</c> from the for loop; otherwise, <c>append</c> the new word to <c>acc_list</c> before reading the next inputÂ  - Return <c>acc_list</c></p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="20%" />
          <col top="minor" width="40%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>build_list()</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>April
showers
bring
May
flowers
STOP
</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['April', 'showers', 'bring', 'May', 'flowers']</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <preamble visible="no">

        </preamble>
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys


class myTests(TestCaseGui):


  def test1(self):
    teststdin = StringIO.StringIO('April\nshowers\nbring\nMay\nflowers\nSTOP\n')
    sys.stdin = teststdin
    res = build_list()
    sys.stdin = sys.__stdin__
    self.assertEqual(res, ['April', 'showers', 'bring', 'May', 'flowers'], '&lt;pre&gt;April\nshowers\nbring\nMay\nflowers\nSTOP\n&lt;/pre&gt;')

  def test2(self):
    teststdin = StringIO.StringIO('A\nstitch\nin\ntime\nsaves\nnine\nSTOP\n')
    sys.stdin = teststdin
    res = build_list()
    sys.stdin = sys.__stdin__
    self.assertEqual(res, ['A', 'stitch', 'in', 'time', 'saves', 'nine'], '&lt;pre&gt;A\nstitch\nin\ntime\nsaves\nnine\nSTOP\n&lt;/pre&gt;')

  def test3(self):
    teststdin = StringIO.StringIO('Homecoming Week\nSTOP\n')
    sys.stdin = teststdin
    res = build_list()
    sys.stdin = sys.__stdin__
    self.assertEqual(res, ['Homecoming Week'], '&lt;pre&gt;Homecoming Week\nSTOP\n&lt;/pre&gt;')

  def test4(self):
    teststdin = StringIO.StringIO('\nSTOP\n')
    sys.stdin = teststdin
    res = build_list()
    sys.stdin = sys.__stdin__
    self.assertEqual(res, [''], '\nSTOP\n')

  def test5(self):
    teststdin = StringIO.StringIO("If\nit\nain't\nbroke\ndon't\nfix\nit\nSTOP\n&lt;/pre&gt;")
    sys.stdin = teststdin
    res = build_list()
    sys.stdin = sys.__stdin__
    self.assertEqual(res, ['If', 'it', "ain't", 'broke', "don't", 'fix', 'it'], "&lt;pre&gt;If\nit\nain't\nbroke\ndon't\nfix\nit\nSTOP\n&lt;/pre&gt;")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-final_substrings-1" label="exe-sec-HW6-1-32084">
      <title>Final Substrings</title>
      <statement>
        <p>The function <c>final_substrings</c> takes a string parameter <c>inString</c> and returns a list of all the non-empty final substrings of <c>inString</c> (in order by their lengths).</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>final_substrings("Python!")</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['!', 'n!', 'on!', 'hon!', 'thon!', 'ython!', 'Python!']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>final_substrings("dogs")</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['s', 'gs', 'ogs', 'dogs']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>final_substrings("")</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    res = final_substrings('Python!')
    self.assertEqual(res, ['!', 'n!', 'on!', 'hon!', 'thon!', 'ython!', 'Python!'], "final_substrings('Python!')")

  def test2(self):
    res = final_substrings('dogs')
    self.assertEqual(res, ['s', 'gs', 'ogs', 'dogs'], "final_substrings('dogs')")

  def test3(self):
    res = final_substrings('mississippi')
    self.assertEqual(res, ['i', 'pi', 'ppi', 'ippi', 'sippi', 'ssippi', 'issippi', 'sissippi', 'ssissippi', 'ississippi', 'mississippi'], "final_substrings('mississippi')")

  def test4(self):
    res = final_substrings('')
    self.assertEqual(res, [], "final_substrings('')")

  def test5(self):
    res = final_substrings('accumulation')
    self.assertEqual(res, ['n', 'on', 'ion', 'tion', 'ation', 'lation', 'ulation', 'mulation', 'umulation', 'cumulation', 'ccumulation', 'accumulation'], "final_substrings('accumulation')")

  def test6(self):
    res = final_substrings('tiger')
    self.assertEqual(res, ['r', 'er', 'ger', 'iger', 'tiger'], "final_substrings('tiger')")

  def test7(self):
    res = final_substrings('purr')
    self.assertEqual(res, ['r', 'rr', 'urr', 'purr'], "final_substrings('purr')")

myTests().main()
</tests>
      </program>
    </exercise>
    <exercise xml:id="exer-interleave_lists-1" label="exe-sec-HW6-1-161051">
      <title>Interleave Lists</title>
      <statement>
        <p>The function <c>interleave_lists</c> takes two parameters, <c>L1</c> and <c>L2</c>, both lists. Notice that the lists may have different lengths.</p>
        <p>The function accumulates a new list by appending alternating items from <c>L1</c> and <c>L2</c> until one list has been exhausted.Â  The remaining items from the other list are then appended to the end of the new list, and the new list is returned.</p>
        <p>For example, if <c>L1 = ["hop", "skip", "jump", "rest"]</c> and <c>L2 = ["up", "down"]</c>, then the function would return the list: <c>["hop", "up", "skip", "down", "jump", "rest"]</c>.</p>
        <p><alert>HINT:</alert>Python has a built-in function<alert><c>min()</c></alert>which is helpful here.</p>
        <p>
          <ul>
            <li>Initialize accumulator variable <c>newlist</c> to be an empty list</li>
            <li>Set <c>min_length = min(len(L1), len(L2))</c>, the smaller of the two list lengths</li>
            <li>Use a <alert>for loop</alert>to iterate <c>k</c> over <c>range(min_length)</c> to do the first part of this function's work. On each iteration, append to newlist the item from index k in L1, and then append the item from index k in L2 (two appends on each iteration).</li>
            <li>AFTER the loop finishes, append the remaining items (if any) to newlist; use a decision statement to determine which list has remaining items -- then it just takes one line of code to append those items to newlist (using a slice of L1 or L2)</li>
            <li><c>return newlist</c></li>
          </ul>
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L1 = ["hop", "skip", "jump"]
L2 = ["A", "B", "C", "D", "E"]
interleave_lists(L1, L2)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['hop', 'A', 'skip', 'B', 'jump', 'C', 'D', 'E']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L1 = ["dive"]
L2 = ["hop", "skip", "jump"]
interleave_lists(L1, L2)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['dive', 'hop', 'skip', 'jump']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>cats = ["Ziggy", "Troll Boy"]
dogs = ["Ruthie", "Ame"]
interleave_lists(cats, dogs)</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['Ziggy', 'Ruthie', 'Troll Boy', 'Ame']</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <code>

        </code>
<tests>
from unittest.gui import TestCaseGui
import StringIO
import sys

class myTests(TestCaseGui):


  def test1(self):
    res = interleave_lists(['dive'], ['hop', 'skip', 'jump'])
    self.assertEqual(res, ['dive', 'hop', 'skip', 'jump'], "interleave_lists(['dive'], ['hop', 'skip', 'jump'])")

  def test2(self):
    res = interleave_lists(['Ziggy', 'Troll Boy'], ['Ruthie', 'Ame'])
    self.assertEqual(res, ['Ziggy', 'Ruthie', 'Troll Boy', 'Ame'], "interleave_lists(['Ziggy', 'Troll Boy'], ['Ruthie', 'Ame'])")

  def test3(self):
    res = interleave_lists(['Flopsy', 'Mopsy', 'Cottontail'], ['leaping', 'kicking', 'snuggling'])
    self.assertEqual(res, ['Flopsy', 'leaping', 'Mopsy', 'kicking', 'Cottontail', 'snuggling'], "interleave_lists(['Flopsy', 'Mopsy', 'Cottontail'], ['leaping', 'kicking', 'snuggling'])")

  def test4(self):
    res = interleave_lists(['small', 'medium', 'large'], [])
    self.assertEqual(res, ['small', 'medium', 'large'], "interleave_lists(['small', 'medium', 'large'], [])")

  def test5(self):
    res = interleave_lists([], ['song', 'lyric', 'melody', 'ballad'])
    self.assertEqual(res, ['song', 'lyric', 'melody', 'ballad'], "interleave_lists([], ['song', 'lyric', 'melody', 'ballad'])")

myTests().main()
</tests>
      </program>
    </exercise>
  </exercises>
</section>
