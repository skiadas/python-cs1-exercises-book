<section xml:id="sec-HW6-PRACTICE-1">
  <title>HW6 PRACTICE</title>
  <introduction>
    <p dir="ltr">This is an UNGRADED assignment.</p>
  </introduction>
  <exercises>
    <exercise xml:id="exer-front_two-2" label="exe-sec-HW6-PRACTICE-1-31905">
      <title>Front Two</title>
      <statement>
        <p>Given a list, <c>L</c>, the function <c>front_two</c> creates a new list of length 2 out of the first two items in <c>L</c> as follows:</p>
        <p>
          <ul>
            <li>In the new list, the second item becomes the first item, and the first item becomes the second.</li>
            <li>If <c>L</c> contains only one item, the first item in the new list should be the value <c>None</c>.</li>
            <li>If <c>L</c> is empty, both items in the new list should be value <c>None</c>.</li>
            <li>The function returns the new list.</li>
          </ul>
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = ['a', 'b', 'c', 'd']
print(front_two(L))                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['b', 'a']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = []
print(front_two(L))                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[None, None]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = [5, 2]
print(front_two(L))                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[2, 5]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = [7]
print(front_two(L))                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[None, 7]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <preamble visible="no">_my_out = ""
_my_in = []
_datafiles = {}

# Start of FileLike
class FileLike:
  def __init__(self, contents):
    self.contents = contents
    self.cursor = 0

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    self.close()

  def tell(self):
    return self.cursor

  def seek(self, n):
    self.cursor = n

  def read(self):
    n = self.cursor
    self.cursor = max(n, len(self.contents))
    return self.contents[n:]

  def readline(self):
    n = self.cursor
    rest = self.contents[n:]
    index = rest.find("\n")
    if index == -1:
      self.cursor = len(self.contents)
      return rest
    index += 1
    self.cursor = n + index
    return rest[:index]

  def readlines(self):
    results = []
    while True:
      line = self.readline()
      if line == '':
        return results
      results.append(line)

  def close(self):
    pass

# End of FileLike

def open(fname, mode = "r"):
  """our own open"""
  if fname in _datafiles:
    return FileLike(_datafiles[fname])
  raise BaseException(f"File not found: {fname}")


def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise RuntimeError()
  return _my_in.pop()

None

        </preamble>
        <code>
def front_two(L):
        </code>
        <postamble visible="no">
        </postamble>
        <tests>import re

RIGHT_WHITESPACE_TRIMMER = re.compile("\\s+(?=\\n|$)")


from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = ['a', 'b', 'c', 'd']
    print(front_two(L))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['b', 'a']".strip(), "Test: " + "L = ['a', 'b', 'c', 'd']\nprint(front_two(L))")


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = ['one']
    print(front_two(L))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "[None, 'one']".strip(), "Test: " + "L = ['one']\nprint(front_two(L))")


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = []
    print(front_two(L))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[None, None]'.strip(), "Test: " + 'L = []\nprint(front_two(L))')


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = [5, 2]
    print(front_two(L))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[2, 5]'.strip(), "Test: " + 'L = [5, 2]\nprint(front_two(L))')


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = [10, -14, 99, 35, 18, -10]
    print(front_two(L))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[-14, 10]'.strip(), "Test: " + 'L = [10, -14, 99, 35, 18, -10]\nprint(front_two(L))')


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = [7]
    print(front_two(L))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[None, 7]'.strip(), "Test: " + 'L = [7]\nprint(front_two(L))')



myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-func_print_items_reverse-2" label="exe-sec-HW6-PRACTICE-1-31906">
      <title>Print Reverse</title>
      <statement>
        <p>The function <c>print_reverse</c> takes one parameter, <c>L</c>, which is a list. Â The function then prints the items in the list <alert>in reverse order</alert>, one item per line, <alert>WITHOUT changing the value of <c>L</c></alert>.</p>
        <p>Write the function definition.</p>
        <p>Note 1: This function does NOT get anything from standard input.</p>
        <p>Note 2: This function DOES, however, print to standard output.</p>
        <p>Note 3: You should NOT return anything from this function (let it return <c>None</c>by default).</p>
        <p>Hint: Some ideas for iterating over a list in reverse order are given <url href="https://thispointer.com/python-different-ways-to-iterate-over-a-list-in-reverse-order/">here</url>.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = ['apple', 'banana', 'cherry']
Lcopy = L[:]
return_value = print_reverse(L)
if return_value != None or L != Lcopy:
    print("Error")                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>cherry
banana
apple                </cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = ['happy']
Lcopy = L[:]
return_value = print_reverse(L)
if return_value != None or L != Lcopy:
    print("Error")                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>happy</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = []
Lcopy = L[:]
return_value = print_reverse(L)
if return_value != None or L != Lcopy:
    print("Error")                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd />
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <preamble visible="no">_my_out = ""
_my_in = []
_datafiles = {}

# Start of FileLike
class FileLike:
  def __init__(self, contents):
    self.contents = contents
    self.cursor = 0

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    self.close()

  def tell(self):
    return self.cursor

  def seek(self, n):
    self.cursor = n

  def read(self):
    n = self.cursor
    self.cursor = max(n, len(self.contents))
    return self.contents[n:]

  def readline(self):
    n = self.cursor
    rest = self.contents[n:]
    index = rest.find("\n")
    if index == -1:
      self.cursor = len(self.contents)
      return rest
    index += 1
    self.cursor = n + index
    return rest[:index]

  def readlines(self):
    results = []
    while True:
      line = self.readline()
      if line == '':
        return results
      results.append(line)

  def close(self):
    pass

# End of FileLike

def open(fname, mode = "r"):
  """our own open"""
  if fname in _datafiles:
    return FileLike(_datafiles[fname])
  raise BaseException(f"File not found: {fname}")


def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise RuntimeError()
  return _my_in.pop()

None

        </preamble>
        <code>

        </code>
        <postamble visible="no">
        </postamble>
        <tests>import re

RIGHT_WHITESPACE_TRIMMER = re.compile("\\s+(?=\\n|$)")


from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = ['apple', 'banana', 'cherry']
    Lcopy = L[:]
    return_value = print_reverse(L)
    if return_value != None or L != Lcopy:
        print("Error")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), 'cherry\nbanana\napple\n'.strip(), "Test: " + 'L = [\'apple\', \'banana\', \'cherry\']\nLcopy = L[:]\nreturn_value = print_reverse(L)\nif return_value != None or L != Lcopy:\n    print("Error")')


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = ["hi", "howdy", "hola", "g'day", "bonjour"]
    Lcopy = L[:]
    return_value = print_reverse(L)
    if return_value != None or L != Lcopy:
        print("Error")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "bonjour\ng'day\nhola\nhowdy\nhi".strip(), "Test: " + 'L = ["hi", "howdy", "hola", "g\'day", "bonjour"]\nLcopy = L[:]\nreturn_value = print_reverse(L)\nif return_value != None or L != Lcopy:\n    print("Error")')


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = [2, 4, 6, 8]
    Lcopy = L[:]
    return_value = print_reverse(L)
    if return_value != None or L != Lcopy:
        print("Error")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '8\n6\n4\n2'.strip(), "Test: " + 'L = [2, 4, 6, 8]\nLcopy = L[:]\nreturn_value = print_reverse(L)\nif return_value != None or L != Lcopy:\n    print("Error")')


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = ['happy']
    Lcopy = L[:]
    return_value = print_reverse(L)
    if return_value != None or L != Lcopy:
        print("Error")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), 'happy\n'.strip(), "Test: " + 'L = [\'happy\']\nLcopy = L[:]\nreturn_value = print_reverse(L)\nif return_value != None or L != Lcopy:\n    print("Error")')


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = []
    Lcopy = L[:]
    return_value = print_reverse(L)
    if return_value != None or L != Lcopy:
        print("Error")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), ''.strip(), "Test: " + 'L = []\nLcopy = L[:]\nreturn_value = print_reverse(L)\nif return_value != None or L != Lcopy:\n    print("Error")')


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = ['eanie', 'meanie', 'miney', 'mail', 'catch', 'a', 'python', 'by', 'its', 'TAIL']
    Lcopy = L[:]
    return_value = print_reverse(L)
    if return_value != None or L != Lcopy:
        print("Error")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), 'TAIL\nits\nby\npython\na\ncatch\nmail\nminey\nmeanie\neanie\n'.strip(), "Test: " + 'L = [\'eanie\', \'meanie\', \'miney\', \'mail\', \'catch\', \'a\', \'python\', \'by\', \'its\', \'TAIL\']\nLcopy = L[:]\nreturn_value = print_reverse(L)\nif return_value != None or L != Lcopy:\n    print("Error")')



myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-sum_evens-2" label="exe-sec-HW6-PRACTICE-1-31990">
      <title>Sum Evens</title>
      <statement>
        <p>The function <c>sum_evens</c> takes a list of integers and returns the <alert>sum</alert> of all the even integers in the list.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(sum_evens([1, 5, 2, 5, 3, 5, 4]))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>6</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(sum_evens([5, 5, -5, -5]))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(sum_evens([16, 24, 30]))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>70</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <preamble visible="no">_my_out = ""
_my_in = []
_datafiles = {}

# Start of FileLike
class FileLike:
  def __init__(self, contents):
    self.contents = contents
    self.cursor = 0

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    self.close()

  def tell(self):
    return self.cursor

  def seek(self, n):
    self.cursor = n

  def read(self):
    n = self.cursor
    self.cursor = max(n, len(self.contents))
    return self.contents[n:]

  def readline(self):
    n = self.cursor
    rest = self.contents[n:]
    index = rest.find("\n")
    if index == -1:
      self.cursor = len(self.contents)
      return rest
    index += 1
    self.cursor = n + index
    return rest[:index]

  def readlines(self):
    results = []
    while True:
      line = self.readline()
      if line == '':
        return results
      results.append(line)

  def close(self):
    pass

# End of FileLike

def open(fname, mode = "r"):
  """our own open"""
  if fname in _datafiles:
    return FileLike(_datafiles[fname])
  raise BaseException(f"File not found: {fname}")


def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise RuntimeError()
  return _my_in.pop()

None

        </preamble>
        <code>

        </code>
        <postamble visible="no">
        </postamble>
        <tests>import re

RIGHT_WHITESPACE_TRIMMER = re.compile("\\s+(?=\\n|$)")


from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(sum_evens([1, 5, 2, 5, 3, 5, 4]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '6'.strip(), "Test: " + 'print(sum_evens([1, 5, 2, 5, 3, 5, 4]))')


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(sum_evens([5, 5, -5, -5]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '0'.strip(), "Test: " + 'print(sum_evens([5, 5, -5, -5]))')


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(sum_evens([16, 24, 30]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '70'.strip(), "Test: " + 'print(sum_evens([16, 24, 30]))')


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(sum_evens([-1, 0, 0, 0, 1]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '0'.strip(), "Test: " + 'print(sum_evens([-1, 0, 0, 0, 1]))')


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(sum_evens([-2, 4, -6, 8]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '4'.strip(), "Test: " + 'print(sum_evens([-2, 4, -6, 8]))')


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(sum_evens([9, 5, 100, 3, 7]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '100'.strip(), "Test: " + 'print(sum_evens([9, 5, 100, 3, 7]))')


  def test7(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(sum_evens([]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '0'.strip(), "Test: " + 'print(sum_evens([]))')


  def test8(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(sum_evens([2, 5, 0]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '2'.strip(), "Test: " + 'print(sum_evens([2, 5, 0]))')


  def test9(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(sum_evens([-18]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '-18'.strip(), "Test: " + 'print(sum_evens([-18]))')


  def test10(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(sum_evens([ ]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '0'.strip(), "Test: " + 'print(sum_evens([ ]))')



myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-count_contains_x-2" label="exe-sec-HW6-PRACTICE-1-32010">
      <title>Count Contains 'og'</title>
      <statement>
        <p>The function <c>count_contains_og</c>takes a list of strings and returns how many strings in the list contain 'og' / 'OG' / 'oG' / 'Og' (check for 'og', ignoring case).</p>
        <p><alert>Hint</alert>: Use the sequence membership operator <alert>in</alert> to help you check for 'og' in the individual strings. Create a <alert>lower-cased</alert> version of the string (<c>lower</c>), then use the <c>in</c> operator.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>str_list = ['cat', 'dog', 'FROG', 'monkey']
print(count_contains_og(str_list))                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>2</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>strlist = ["X", "x"]
print(count_contains_og(strlist))                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>0</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>list_of_one_og = ["Doggie"]
print(count_contains_og(list_of_one_og))                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>1</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <preamble visible="no">_my_out = ""
_my_in = []
_datafiles = {}

# Start of FileLike
class FileLike:
  def __init__(self, contents):
    self.contents = contents
    self.cursor = 0

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    self.close()

  def tell(self):
    return self.cursor

  def seek(self, n):
    self.cursor = n

  def read(self):
    n = self.cursor
    self.cursor = max(n, len(self.contents))
    return self.contents[n:]

  def readline(self):
    n = self.cursor
    rest = self.contents[n:]
    index = rest.find("\n")
    if index == -1:
      self.cursor = len(self.contents)
      return rest
    index += 1
    self.cursor = n + index
    return rest[:index]

  def readlines(self):
    results = []
    while True:
      line = self.readline()
      if line == '':
        return results
      results.append(line)

  def close(self):
    pass

# End of FileLike

def open(fname, mode = "r"):
  """our own open"""
  if fname in _datafiles:
    return FileLike(_datafiles[fname])
  raise BaseException(f"File not found: {fname}")


def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise RuntimeError()
  return _my_in.pop()

None

        </preamble>
        <code>

        </code>
        <postamble visible="no">
        </postamble>
        <tests>import re

RIGHT_WHITESPACE_TRIMMER = re.compile("\\s+(?=\\n|$)")


from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')
    
    str_list = ['cat', 'dog', 'FROG', 'monkey']
    print(count_contains_og(str_list))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '2'.strip(), "Test: " + "str_list = ['cat', 'dog', 'FROG', 'monkey']\nprint(count_contains_og(str_list))")


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')
    
    str_list = ['lOg', 'LoG', "FOGGY", "tree", "", "gogogo"]
    print(count_contains_og(str_list))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '4'.strip(), "Test: " + 'str_list = [\'lOg\', \'LoG\', "FOGGY", "tree", "", "gogogo"]\nprint(count_contains_og(str_list))')


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')
    
    strlist = ["X", "x"]
    print(count_contains_og(strlist))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '0\n'.strip(), "Test: " + 'strlist = ["X", "x"]\nprint(count_contains_og(strlist))')


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')
    
    empty = []
    print(count_contains_og(empty))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '0'.strip(), "Test: " + 'empty = []\nprint(count_contains_og(empty))')


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')
    
    list_of_one = ["UNO"]
    print(count_contains_og(list_of_one))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '0'.strip(), "Test: " + 'list_of_one = ["UNO"]\nprint(count_contains_og(list_of_one))')


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')
    
    list_of_one_og = ["Doggie"]
    print(count_contains_og(list_of_one_og))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '1'.strip(), "Test: " + 'list_of_one_og = ["Doggie"]\nprint(count_contains_og(list_of_one_og))')


  def test7(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = ('DOG  '*10).split()
    print(count_contains_og(L))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '10\n'.strip(), "Test: " + "L = ('DOG  '*10).split()\nprint(count_contains_og(L))")


  def test8(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L = ['go', 'dogs', 'go', 'DOGS', 'GO', 'ods']
    print(count_contains_og(L))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '2'.strip(), "Test: " + "L = ['go', 'dogs', 'go', 'DOGS', 'GO', 'ods']\nprint(count_contains_og(L))")



myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-ffirst_negative_trickier-2" label="exe-sec-HW6-PRACTICE-1-32045">
      <title>First Negative</title>
      <statement>
        <p>Define the function <c>first_negative(nums)</c> takes one parameter. <c>nums</c>, a possibly empty list of numbers. The function then returns the first negative item in <c>numlist</c>.</p>
        <p>Note: if there are <alert>NO</alert> negative numbers in the list, the function returns the Python object <c>None</c>.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(first_negative([1, 3, 9, -2]))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-2</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(first_negative([1, 3, 9, 2]))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>None</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(first_negative([1, -3, -9, -2]))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-3</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(first_negative([0, -1.1, 0, -2.2, 0, -3.3, 0]))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>-1.1</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <preamble visible="no">_my_out = ""
_my_in = []
_datafiles = {}

# Start of FileLike
class FileLike:
  def __init__(self, contents):
    self.contents = contents
    self.cursor = 0

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    self.close()

  def tell(self):
    return self.cursor

  def seek(self, n):
    self.cursor = n

  def read(self):
    n = self.cursor
    self.cursor = max(n, len(self.contents))
    return self.contents[n:]

  def readline(self):
    n = self.cursor
    rest = self.contents[n:]
    index = rest.find("\n")
    if index == -1:
      self.cursor = len(self.contents)
      return rest
    index += 1
    self.cursor = n + index
    return rest[:index]

  def readlines(self):
    results = []
    while True:
      line = self.readline()
      if line == '':
        return results
      results.append(line)

  def close(self):
    pass

# End of FileLike

def open(fname, mode = "r"):
  """our own open"""
  if fname in _datafiles:
    return FileLike(_datafiles[fname])
  raise BaseException(f"File not found: {fname}")


def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise RuntimeError()
  return _my_in.pop()

None

        </preamble>
        <code>

        </code>
        <postamble visible="no">
        </postamble>
        <tests>import re

RIGHT_WHITESPACE_TRIMMER = re.compile("\\s+(?=\\n|$)")


from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(first_negative([1, 3, 9, -2]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '-2'.strip(), "Test: " + 'print(first_negative([1, 3, 9, -2]))')


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(first_negative([1, 3, 9, 2]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), 'None'.strip(), "Test: " + 'print(first_negative([1, 3, 9, 2]))')


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(first_negative([1, -3, -9, -2]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '-3'.strip(), "Test: " + 'print(first_negative([1, -3, -9, -2]))')


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(first_negative([0, -1.1, 0, -2.2, 0, -3.3, 0]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '-1.1'.strip(), "Test: " + 'print(first_negative([0, -1.1, 0, -2.2, 0, -3.3, 0]))')


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(first_negative([0.0, 0.0, 0.0, -99.0, -98.0, -97.0]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '-99.0'.strip(), "Test: " + 'print(first_negative([0.0, 0.0, 0.0, -99.0, -98.0, -97.0]))')


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(first_negative([-100]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '-100'.strip(), "Test: " + 'print(first_negative([-100]))')


  def test7(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(first_negative([]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), 'None'.strip(), "Test: " + 'print(first_negative([]))')


  def test8(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(first_negative([-3, -4, -5]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '-3'.strip(), "Test: " + 'print(first_negative([-3, -4, -5]))')


  def test9(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(first_negative([1.1]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), 'None'.strip(), "Test: " + 'print(first_negative([1.1]))')


  def test10(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(first_negative([-0.005, 0.005, -0.004]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '-0.005'.strip(), "Test: " + 'print(first_negative([-0.005, 0.005, -0.004]))')



myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-square_nums_1-2" label="exe-sec-HW6-PRACTICE-1-32004">
      <title>Square Nums 1</title>
      <statement>
        <p>Define the function <c>square_nums</c> which takes a list of numbers, <c>numlist</c>, and returns a NEW list containing the squares of the numbers in the original list.Â  The given list, <c>numlist</c>, should not be changed.</p>
        <p><alert>Note</alert>: Use the accumulator pattern and <c>newlist.append(item)</c> to solve this problem.</p>
        <p>
          <ul>
            <li>The accumulator variable, <alert>newlist</alert>, should be initialized to an empty list.</li>
            <li>Inside a <alert>for loop</alert> which iterates over numlist, use <alert>append</alert> to update the value of newlist.</li>
          </ul>
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(square_nums([1, 2, 3, 4, 5]))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[1, 4, 9, 16, 25]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(square_nums([-5, 0, 6]))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[25, 0, 36]</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>print(square_nums([]))</cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <preamble visible="no">_my_out = ""
_my_in = []
_datafiles = {}

# Start of FileLike
class FileLike:
  def __init__(self, contents):
    self.contents = contents
    self.cursor = 0

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    self.close()

  def tell(self):
    return self.cursor

  def seek(self, n):
    self.cursor = n

  def read(self):
    n = self.cursor
    self.cursor = max(n, len(self.contents))
    return self.contents[n:]

  def readline(self):
    n = self.cursor
    rest = self.contents[n:]
    index = rest.find("\n")
    if index == -1:
      self.cursor = len(self.contents)
      return rest
    index += 1
    self.cursor = n + index
    return rest[:index]

  def readlines(self):
    results = []
    while True:
      line = self.readline()
      if line == '':
        return results
      results.append(line)

  def close(self):
    pass

# End of FileLike

def open(fname, mode = "r"):
  """our own open"""
  if fname in _datafiles:
    return FileLike(_datafiles[fname])
  raise BaseException(f"File not found: {fname}")


def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise RuntimeError()
  return _my_in.pop()

None

        </preamble>
        <code>

        </code>
        <postamble visible="no">
        </postamble>
        <tests>import re

RIGHT_WHITESPACE_TRIMMER = re.compile("\\s+(?=\\n|$)")


from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(square_nums([1, 2, 3, 4, 5]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[1, 4, 9, 16, 25]'.strip(), "Test: " + 'print(square_nums([1, 2, 3, 4, 5]))')


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(square_nums([-5, 0, 6]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[25, 0, 36]'.strip(), "Test: " + 'print(square_nums([-5, 0, 6]))')


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(square_nums([]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[]'.strip(), "Test: " + 'print(square_nums([]))')


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(square_nums([11.0, 34.5]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[121.0, 1190.25]'.strip(), "Test: " + 'print(square_nums([11.0, 34.5]))')


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(square_nums([1.2]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[1.44]'.strip(), "Test: " + 'print(square_nums([1.2]))')


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(square_nums([-3, -2, -1, 0]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[9, 4, 1, 0]'.strip(), "Test: " + 'print(square_nums([-3, -2, -1, 0]))')


  def test7(self):
    resetMyStdOut()
    setMyStdIn('')
    
    print(square_nums([1, 2, -1, 1, 2, 0, 10, 10, 10, 9, -8]))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[1, 4, 1, 1, 4, 0, 100, 100, 100, 81, 64]'.strip(), "Test: " + 'print(square_nums([1, 2, -1, 1, 2, 0, 10, 10, 10, 9, -8]))')



myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-make_list_items_upper_2-2" label="exe-sec-HW6-PRACTICE-1-31105">
      <title>Make List Items Uppercase 2</title>
      <statement>
        <p>Define the function <c>make_uppercase(mylist)</c>, which takes a list parameter <c>mylist</c> (a list of strings), mutates the list by uppercasing each string in mylist. The function returns <c>None</c>.</p>
        <p>For example, if <c>mylist</c> is <c>['cat', 'Dog', 'frOG']</c>, then the mutated list shouldÂ  be <c>['CAT', 'DOG', 'FROG']</c>.</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>mylist = ['cat', 'Dog', 'frOG']
result = make_uppercase(mylist)
print(mylist)
if result != None:
    print("Error, return value should be None")                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['CAT', 'DOG', 'FROG']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>mylist = ['baNanas', 'appLes', 'pEAches', 'PEArs']
result = make_uppercase(mylist)
print(mylist)
if result != None:
    print("Error, return value should be None")                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['BANANAS', 'APPLES', 'PEACHES', 'PEARS']</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <preamble visible="no">_my_out = ""
_my_in = []
_datafiles = {}

# Start of FileLike
class FileLike:
  def __init__(self, contents):
    self.contents = contents
    self.cursor = 0

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    self.close()

  def tell(self):
    return self.cursor

  def seek(self, n):
    self.cursor = n

  def read(self):
    n = self.cursor
    self.cursor = max(n, len(self.contents))
    return self.contents[n:]

  def readline(self):
    n = self.cursor
    rest = self.contents[n:]
    index = rest.find("\n")
    if index == -1:
      self.cursor = len(self.contents)
      return rest
    index += 1
    self.cursor = n + index
    return rest[:index]

  def readlines(self):
    results = []
    while True:
      line = self.readline()
      if line == '':
        return results
      results.append(line)

  def close(self):
    pass

# End of FileLike

def open(fname, mode = "r"):
  """our own open"""
  if fname in _datafiles:
    return FileLike(_datafiles[fname])
  raise BaseException(f"File not found: {fname}")


def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise RuntimeError()
  return _my_in.pop()

None

        </preamble>
        <code>

        </code>
        <postamble visible="no">
        </postamble>
        <tests>import re

RIGHT_WHITESPACE_TRIMMER = re.compile("\\s+(?=\\n|$)")


from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')
    
    mylist = ['cat', 'Dog', 'frOG']
    result = make_uppercase(mylist)
    print(mylist)
    if result != None:
        print("Error, return value should be None")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['CAT', 'DOG', 'FROG']\n".strip(), "Test: " + 'mylist = [\'cat\', \'Dog\', \'frOG\']\nresult = make_uppercase(mylist)\nprint(mylist)\nif result != None:\n    print("Error, return value should be None")')


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')
    
    mylist = ['baNanas', 'appLes', 'pEAches', 'PEArs']
    result = make_uppercase(mylist)
    print(mylist)
    if result != None:
        print("Error, return value should be None")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['BANANAS', 'APPLES', 'PEACHES', 'PEARS']\n".strip(), "Test: " + 'mylist = [\'baNanas\', \'appLes\', \'pEAches\', \'PEArs\']\nresult = make_uppercase(mylist)\nprint(mylist)\nif result != None:\n    print("Error, return value should be None")')


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')
    
    mylist = ['w', 'x', 'y', 'z', 'yes']
    result = make_uppercase(mylist)
    print(mylist)
    if result != None:
        print("Error, return value should be None")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['W', 'X', 'Y', 'Z', 'YES']\n".strip(), "Test: " + 'mylist = [\'w\', \'x\', \'y\', \'z\', \'yes\']\nresult = make_uppercase(mylist)\nprint(mylist)\nif result != None:\n    print("Error, return value should be None")')


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')
    
    mylist = []
    result = make_uppercase(mylist)
    print(mylist)
    if result != None:
        print("Error, return value should be None")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[]\n'.strip(), "Test: " + 'mylist = []\nresult = make_uppercase(mylist)\nprint(mylist)\nif result != None:\n    print("Error, return value should be None")')


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')
    
    mylist = ['cOw', 'HoRse', 'pig', 'BUNNy']
    result = make_uppercase(mylist)
    print(mylist)
    if result != None:
        print("Error, return value should be None")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['COW', 'HORSE', 'PIG', 'BUNNY']\n".strip(), "Test: " + 'mylist = [\'cOw\', \'HoRse\', \'pig\', \'BUNNy\']\nresult = make_uppercase(mylist)\nprint(mylist)\nif result != None:\n    print("Error, return value should be None")')



myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-build_list_from_input-2" label="exe-sec-HW6-PRACTICE-1-271602">
      <title>Build List from Input</title>
      <statement>
        <p>
          Write a function, build_list<c>()</c>, to read words from standard input and store them in a list.
          <ul>
            <li>You may assume that there will be fewer than 100 words.</li>
            <li>If the string "STOP" is given as input before 100 words have been added to the list, stop the for loop and return the accumulated list of strings</li>
          </ul>
          <h3>Hints:</h3>
        </p>
        <p>- Use the accumulate-a-list pattern, with <c>acc_list</c> initialized to the empty list, <c>[]</c> - Use a for loop to iterate i over <c>range(100)</c> - When STOP is read from input, <c>break</c> from the for loop; otherwise, <c>append</c> the new word to <c>acc_list</c> before reading the next inputÂ  - Return <c>acc_list</c></p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="20%" />
          <col top="minor" width="40%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Input</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L = build_list()
print(L)
C = ["April", "showers", "bring", "May", "flowers"]
if L != C:
    print("error")                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>April
showers
bring
May
flowers
STOP
                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['April', 'showers', 'bring', 'May', 'flowers']</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <preamble visible="no">_my_out = ""
_my_in = []
_datafiles = {}

# Start of FileLike
class FileLike:
  def __init__(self, contents):
    self.contents = contents
    self.cursor = 0

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    self.close()

  def tell(self):
    return self.cursor

  def seek(self, n):
    self.cursor = n

  def read(self):
    n = self.cursor
    self.cursor = max(n, len(self.contents))
    return self.contents[n:]

  def readline(self):
    n = self.cursor
    rest = self.contents[n:]
    index = rest.find("\n")
    if index == -1:
      self.cursor = len(self.contents)
      return rest
    index += 1
    self.cursor = n + index
    return rest[:index]

  def readlines(self):
    results = []
    while True:
      line = self.readline()
      if line == '':
        return results
      results.append(line)

  def close(self):
    pass

# End of FileLike

def open(fname, mode = "r"):
  """our own open"""
  if fname in _datafiles:
    return FileLike(_datafiles[fname])
  raise BaseException(f"File not found: {fname}")


def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise RuntimeError()
  return _my_in.pop()

None

        </preamble>
        <code>

        </code>
        <postamble visible="no">
        </postamble>
        <tests>import re

RIGHT_WHITESPACE_TRIMMER = re.compile("\\s+(?=\\n|$)")


from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('April\nshowers\nbring\nMay\nflowers\nSTOP\n')
    
    L = build_list()
    print(L)
    C = ["April", "showers", "bring", "May", "flowers"]
    if L != C:
        print("error")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['April', 'showers', 'bring', 'May', 'flowers']\n".strip(), "Input: " + 'April\nshowers\nbring\nMay\nflowers\nSTOP\n')


  def test2(self):
    resetMyStdOut()
    setMyStdIn('A\nstitch\nin\ntime\nsaves\nnine\nSTOP\n')
    
    L = build_list()
    print(L)
    C = ["A", "stitch", "in", "time", "saves", "nine"]
    if L != C:
        print("error")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['A', 'stitch', 'in', 'time', 'saves', 'nine']\n".strip(), "Input: " + 'A\nstitch\nin\ntime\nsaves\nnine\nSTOP\n')


  def test3(self):
    resetMyStdOut()
    setMyStdIn('Homecoming Week\nSTOP\n')
    
    L = build_list()
    print(L)
    C = ["Homecoming Week"]
    if L != C:
        print("error")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['Homecoming Week']\n".strip(), "Input: " + 'Homecoming Week\nSTOP\n')


  def test4(self):
    resetMyStdOut()
    setMyStdIn('STOP\n')
    
    L = build_list()
    print(L)
    C = []
    if L != C:
        print("error")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[]'.strip(), "Input: " + 'STOP\n')


  def test5(self):
    resetMyStdOut()
    setMyStdIn("If\nit\nain't\nbroke\ndon't\nfix\nit\nSTOP")
    
    L = build_list()
    print(L)
    C = ["If", "it", "ain't", "broke", "don't", "fix", "it"]
    if L != C:
        print("error")
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[\'If\', \'it\', "ain\'t", \'broke\', "don\'t", \'fix\', \'it\']\n'.strip(), "Input: " + "If\nit\nain't\nbroke\ndon't\nfix\nit\nSTOP")



myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-final_substrings-2" label="exe-sec-HW6-PRACTICE-1-32084">
      <title>Final Substrings</title>
      <statement>
        <p>The function <c>final</c><c>_substrings</c> takes a string parameter <c>inString</c> and returns a list of all the non-empty final substrings of <c>inString</c> (in order by their lengths).</p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>inString = "Python!"
L = final_substrings(inString)
print(L)                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['!', 'n!', 'on!', 'hon!', 'thon!', 'ython!', 'Python!']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>inString = "dogs"
L = final_substrings(inString)
print(L)                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['s', 'gs', 'ogs', 'dogs']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>inString = ""
L = final_substrings(inString)
print(L)                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>[]</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <preamble visible="no">_my_out = ""
_my_in = []
_datafiles = {}

# Start of FileLike
class FileLike:
  def __init__(self, contents):
    self.contents = contents
    self.cursor = 0

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    self.close()

  def tell(self):
    return self.cursor

  def seek(self, n):
    self.cursor = n

  def read(self):
    n = self.cursor
    self.cursor = max(n, len(self.contents))
    return self.contents[n:]

  def readline(self):
    n = self.cursor
    rest = self.contents[n:]
    index = rest.find("\n")
    if index == -1:
      self.cursor = len(self.contents)
      return rest
    index += 1
    self.cursor = n + index
    return rest[:index]

  def readlines(self):
    results = []
    while True:
      line = self.readline()
      if line == '':
        return results
      results.append(line)

  def close(self):
    pass

# End of FileLike

def open(fname, mode = "r"):
  """our own open"""
  if fname in _datafiles:
    return FileLike(_datafiles[fname])
  raise BaseException(f"File not found: {fname}")


def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise RuntimeError()
  return _my_in.pop()

None

        </preamble>
        <code>

        </code>
        <postamble visible="no">
        </postamble>
        <tests>import re

RIGHT_WHITESPACE_TRIMMER = re.compile("\\s+(?=\\n|$)")


from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')
    
    inString = "Python!"
    L = final_substrings(inString)
    print(L)
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['!', 'n!', 'on!', 'hon!', 'thon!', 'ython!', 'Python!']\n".strip(), "Test: " + 'inString = "Python!"\nL = final_substrings(inString)\nprint(L)')


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')
    
    inString = "dogs"
    L = final_substrings(inString)
    print(L)
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['s', 'gs', 'ogs', 'dogs']\n".strip(), "Test: " + 'inString = "dogs"\nL = final_substrings(inString)\nprint(L)')


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')
    
    inString = "mississippi"
    L = final_substrings(inString)
    print(L)
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['i', 'pi', 'ppi', 'ippi', 'sippi', 'ssippi', 'issippi', 'sissippi', 'ssissippi', 'ississippi', 'mississippi']\n".strip(), "Test: " + 'inString = "mississippi"\nL = final_substrings(inString)\nprint(L)')


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')
    
    inString = ""
    L = final_substrings(inString)
    print(L)
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), '[]\n'.strip(), "Test: " + 'inString = ""\nL = final_substrings(inString)\nprint(L)')


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')
    
    inString = "accumulation"
    L = final_substrings(inString)
    print(L)
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['n', 'on', 'ion', 'tion', 'ation', 'lation', 'ulation', 'mulation', 'umulation', 'cumulation', 'ccumulation', 'accumulation']\n".strip(), "Test: " + 'inString = "accumulation"\nL = final_substrings(inString)\nprint(L)')


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')
    
    inString = "tiger"
    L = final_substrings(inString)
    print(L)
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['r', 'er', 'ger', 'iger', 'tiger']\n".strip(), "Test: " + 'inString = "tiger"\nL = final_substrings(inString)\nprint(L)')


  def test7(self):
    resetMyStdOut()
    setMyStdIn('')
    
    inString = "purr"
    L = final_substrings(inString)
    print(L)
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['r', 'rr', 'urr', 'purr']\n".strip(), "Test: " + 'inString = "purr"\nL = final_substrings(inString)\nprint(L)')



myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-interleave_lists-2" label="exe-sec-HW6-PRACTICE-1-161051">
      <title>Interleave Lists</title>
      <statement>
        <p>The function <c>interleave_lists</c> takes two parameters, <c>L1</c> and <c>L2</c>, both lists. Notice that the lists may have different lengths.</p>
        <p>The function accumulates a new list by appending alternating items from <c>L1</c> and <c>L2</c> until one list has been exhausted.Â  The remaining items from the other list are then appended to the end of the new list, and the new list is returned.</p>
        <p>For example, if <c>L1 = ["hop", "skip", "jump", "rest"]</c> and <c>L2 = ["up", "down"]</c>, then the function would return the list: <c>["hop", "up", "skip", "down", "jump", "rest"]</c>.</p>
        <p><alert>HINT:</alert>Python has a built-in function<alert><c>min()</c></alert>which is helpful here.</p>
        <p>
          <ul>
            <li>Initialize accumulator variable <c>newlist</c> to be an empty list</li>
            <li>Set <c>min_length = min(len(L1), len(L2))</c>, the smaller of the two list lengths</li>
            <li>Use a <alert>for loop</alert>to iterate <c>k</c> over <c>range(min_length)</c> to do the first part of this function's work. On each iteration, append to newlist the item from index k in L1, and then append the item from index k in L2 (two appends on each iteration).</li>
            <li>AFTER the loop finishes, append the remaining items (if any) to newlist; use a decision statement to determine which list has remaining items -- then it just takes one line of code to append those items to newlist (using a slice of L1 or L2)</li>
            <li><c>return newlist</c></li>
          </ul>
        </p>
        <p>For example:</p>
        <tabular>
          <col top="minor" width="40%" />
          <col top="minor" width="60%" />
          <row header="yes" left="minor">
            <cell bottom="minor" right="minor">Test</cell>
            <cell bottom="minor" right="minor">Result</cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L1 = ["hop", "skip", "jump"]
L2 = ["A", "B", "C", "D", "E"]
print(interleave_lists(L1, L2))                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['hop', 'A', 'skip', 'B', 'jump', 'C', 'D', 'E']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>L1 = ["dive"]
L2 = ["hop", "skip", "jump"]
print(interleave_lists(L1, L2))                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['dive', 'hop', 'skip', 'jump']</cd>
              </p>
            </cell>
          </row>
          <row header="no" left="minor">
            <cell bottom="minor" right="minor">
              <p>
                <cd>cats = ["Ziggy", "Troll Boy"]
dogs = ["Ruthie", "Ame"]
print(interleave_lists(cats, dogs))                </cd>
              </p>
            </cell>
            <cell bottom="minor" right="minor">
              <p>
                <cd>['Ziggy', 'Ruthie', 'Troll Boy', 'Ame']</cd>
              </p>
            </cell>
          </row>
        </tabular>
      </statement>
      <program interactive="activecode" language="python">
        <preamble visible="no">_my_out = ""
_my_in = []
_datafiles = {}

# Start of FileLike
class FileLike:
  def __init__(self, contents):
    self.contents = contents
    self.cursor = 0

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    self.close()

  def tell(self):
    return self.cursor

  def seek(self, n):
    self.cursor = n

  def read(self):
    n = self.cursor
    self.cursor = max(n, len(self.contents))
    return self.contents[n:]

  def readline(self):
    n = self.cursor
    rest = self.contents[n:]
    index = rest.find("\n")
    if index == -1:
      self.cursor = len(self.contents)
      return rest
    index += 1
    self.cursor = n + index
    return rest[:index]

  def readlines(self):
    results = []
    while True:
      line = self.readline()
      if line == '':
        return results
      results.append(line)

  def close(self):
    pass

# End of FileLike

def open(fname, mode = "r"):
  """our own open"""
  if fname in _datafiles:
    return FileLike(_datafiles[fname])
  raise BaseException(f"File not found: {fname}")


def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise RuntimeError()
  return _my_in.pop()

None

        </preamble>
        <code>

        </code>
        <postamble visible="no">
        </postamble>
        <tests>import re

RIGHT_WHITESPACE_TRIMMER = re.compile("\\s+(?=\\n|$)")


from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L1 = ["hop", "skip", "jump"]
    L2 = ["A", "B", "C", "D", "E"]
    print(interleave_lists(L1, L2))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['hop', 'A', 'skip', 'B', 'jump', 'C', 'D', 'E']".strip(), "Test: " + 'L1 = ["hop", "skip", "jump"]\nL2 = ["A", "B", "C", "D", "E"]\nprint(interleave_lists(L1, L2))')


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L1 = ["dive"]
    L2 = ["hop", "skip", "jump"]
    print(interleave_lists(L1, L2))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['dive', 'hop', 'skip', 'jump']".strip(), "Test: " + 'L1 = ["dive"]\nL2 = ["hop", "skip", "jump"]\nprint(interleave_lists(L1, L2))')


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')
    
    cats = ["Ziggy", "Troll Boy"]
    dogs = ["Ruthie", "Ame"]
    print(interleave_lists(cats, dogs))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['Ziggy', 'Ruthie', 'Troll Boy', 'Ame']\n".strip(), "Test: " + 'cats = ["Ziggy", "Troll Boy"]\ndogs = ["Ruthie", "Ame"]\nprint(interleave_lists(cats, dogs))')


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')
    
    bunnies = ["Flopsy", "Mopsy", "Cottontail"]
    superpowers = ["leaping", "kicking", "snuggling"]
    print(interleave_lists(bunnies, superpowers))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['Flopsy', 'leaping', 'Mopsy', 'kicking', 'Cottontail', 'snuggling']".strip(), "Test: " + 'bunnies = ["Flopsy", "Mopsy", "Cottontail"]\nsuperpowers = ["leaping", "kicking", "snuggling"]\nprint(interleave_lists(bunnies, superpowers))')


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L1 = ["small", "medium", "large"]
    L2 = []
    print(interleave_lists(L1, L2))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['small', 'medium', 'large']".strip(), "Test: " + 'L1 = ["small", "medium", "large"]\nL2 = []\nprint(interleave_lists(L1, L2))')


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')
    
    L1 = []
    L2 = ["song", "lyric", "melody", "ballad"]
    print(interleave_lists(L1, L2))
    
    self.assertEqual(RIGHT_WHITESPACE_TRIMMER.sub("", getMyStdOut().strip()), "['song', 'lyric', 'melody', 'ballad']".strip(), "Test: " + 'L1 = []\nL2 = ["song", "lyric", "melody", "ballad"]\nprint(interleave_lists(L1, L2))')



myTests().main()        </tests>
      </program>
    </exercise>
  </exercises>
</section>